{"version":3,"file":"solclient.js","mappings":"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Q,OACN,gBACJC,EAAe,+BACfC,EAA8B,yBAC9BC,EAAwB,0BACxBC,EAAyB,aACzBC,EAAY,sBACZC,EAAqB,uBACrBC,GACE,EAAQ,OACN,oBACJC,EAAmB,6BACnBC,GACE,EAAQ,OACN,gCACJC,EAA+B,2BAC/BC,GACE,EAAQ,OACN,wBACJC,EAAuB,gBACvBC,EAAe,gBACfC,EAAe,qBACfC,EAAoB,iBACpBC,EAAgB,gBAChBC,EAAe,UACfC,GACE,EAAQ,OACN,SACJC,EAAQ,aACRC,EAAY,gBACZC,EAAe,mBACfC,EAAkB,yBAClBC,EAAwB,qBACxBC,GACE,EAAQ,OACN,qBACJC,EAAoB,eACpBC,EAAc,gBACdC,EAAe,uBACfC,GAAsB,QACtBrD,GAAO,aACPsD,GAAY,mBACZC,GAAkB,iBAClBC,GAAgB,kBAChBC,GAAiB,aACjBC,GAAY,aACZC,IACE,EAAQ,OACN,YACJC,GAAW,oBACXC,GAAmB,mBACnBC,GAAkB,gBAClBC,GAAe,mBACfC,GAAkB,aAClBC,GAAY,uBACZC,IACE,EAAQ,OACN,SACJC,IACE,EAAQ,OACN,eACJC,GAAc,kBACdC,IACE,EAAQ,OACN,QACJC,IACE,EAAQ,MAYNC,GAAS,CACblC,0BACAa,uBACAU,eACAC,uBACAC,sBACAC,mBACAC,sBACAC,gBACAC,0BACAf,iBACAlC,iBACAzB,cACAmB,kBACAnG,eACA0G,UACAC,WACAxJ,OACAkI,UACAuB,qBACAM,kBACAC,iCACAC,2BACAC,4BACAR,0BACAC,kBACAa,kCACAC,6BACAgB,kBACA7B,cACAC,qBACA6B,0BACAxC,sBACApG,iBACA6H,kBACAR,eACAC,wBACAC,yBACAO,kBACAC,uBACAC,mBACAC,kBACAC,YACAV,sBAMAC,+BACAT,4BACAX,eACAC,mBACA6B,WACAC,eACAC,kBACAC,qBACAC,2BACAC,uBACAjD,WACAsD,gBACAC,sBACAC,oBACAC,qBACAC,gBACAlD,mBACAC,2BACAC,6BACAiD,gBACAQ,YACAvD,QACAwD,kBACAC,qBACAC,WAEAtD,eAEAwD,UArFgB,EAAQ,OA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EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,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","sources":["webpack://solace/webpack/universalModuleDefinition","webpack://solace/./index.js","webpack://solace/./modules/solclient-convert/api.js","webpack://solace/./modules/solclient-convert/lib/base64.js","webpack://solace/./modules/solclient-convert/lib/bits.js","webpack://solace/./modules/solclient-convert/lib/convert.js","webpack://solace/./modules/solclient-convert/lib/hex.js","webpack://solace/./modules/solclient-convert/lib/long.js","webpack://solace/./modules/solclient-core/api-internal.js","webpack://solace/./modules/solclient-core/api.js","webpack://solace/./modules/solclient-debug/api.js","webpack://solace/./modules/solclient-debug/lib/debug.js","webpack://solace/./modules/solclient-destination/api.js","webpack://solace/./modules/solclient-destination/lib/destination-from-network.js","webpack://solace/./modules/solclient-destination/lib/destination-type.js","webpack://solace/./modules/solclient-destination/lib/destination-util.js","webpack://solace/./modules/solclient-destination/lib/destination.js","webpack://solace/./modules/solclient-destination/lib/queue.js","webpack://solace/./modules/solclient-destination/lib/subscription-info.js","webpack://solace/./modules/solclient-destination/lib/topic.js","webpack://solace/./modules/solclient-env/api.js","webpack://solace/./modules/solclient-error/api.js","webpack://solace/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solace/./modules/solclient-error/lib/error-subcodes.js","webpack://solace/./modules/solclient-error/lib/not-implemented-error.js","webpack://solace/./modules/solclient-error/lib/operation-error.js","webpack://solace/./modules/solclient-error/lib/request-error.js","webpack://solace/./modules/solclient-error/lib/request-event-codes.js","webpack://solace/./modules/solclient-error/lib/solace-error.js","webpack://solace/./modules/solclient-eskit/api.js","webpack://solace/./modules/solclient-eskit/lib/array-operations.js","webpack://solace/./modules/solclient-eskit/lib/assert.js","webpack://solace/./modules/solclient-eskit/lib/bidi-map.js","webpack://solace/./modules/solclient-eskit/lib/enum.js","webpack://solace/./modules/solclient-eskit/lib/iterator.js","webpack://solace/./modules/solclient-eskit/lib/lazy.js","webpack://solace/./modules/solclient-eskit/lib/make-map.js","webpack://solace/./modules/solclient-eskit/lib/mixin.js","webpack://solace/./modules/solclient-eskit/lib/resolver.js","webpack://solace/./modules/solclient-eskit/lib/set-operations.js","webpack://solace/./modules/solclient-events/api.js","webpack://solace/./modules/solclient-events/lib/event-emitter.js","webpack://solace/./modules/solclient-events/lib/timer.js","webpack://solace/./modules/solclient-factory/api.js","webpack://solace/./modules/solclient-factory/lib/profile-binding.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory.js","webpack://solace/./modules/solclient-flow/api.js","webpack://solace/./modules/solclient-flow/lib/flow-operation.js","webpack://solace/./modules/solclient-flow/lib/flow.js","webpack://solace/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solace/./modules/solclient-fsm/api.js","webpack://solace/./modules/solclient-fsm/lib/entry-point.js","webpack://solace/./modules/solclient-fsm/lib/event.js","webpack://solace/./modules/solclient-fsm/lib/exit-point.js","webpack://solace/./modules/solclient-fsm/lib/object.js","webpack://solace/./modules/solclient-fsm/lib/state-context.js","webpack://solace/./modules/solclient-fsm/lib/state-machine.js","webpack://solace/./modules/solclient-fsm/lib/state.js","webpack://solace/./modules/solclient-log/api.js","webpack://solace/./modules/solclient-log/lib/console-log-impl.js","webpack://solace/./modules/solclient-log/lib/global-binding.js","webpack://solace/./modules/solclient-log/lib/log-impl.js","webpack://solace/./modules/solclient-log/lib/log-levels.js","webpack://solace/./modules/solclient-message-consumer/api.js","webpack://solace/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solace/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solace/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solace/./modules/solclient-message-publisher/api.js","webpack://solace/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solace/./modules/solclient-message/api.js","webpack://solace/./modules/solclient-message/lib/message-cache-status.js","webpack://solace/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solace/./modules/solclient-message/lib/message-dump-flags.js","webpack://solace/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solace/./modules/solclient-message/lib/message-dump-util.js","webpack://solace/./modules/solclient-message/lib/message-types.js","webpack://solace/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solace/./modules/solclient-message/lib/message.js","webpack://solace/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solace/./modules/solclient-queue/api.js","webpack://solace/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-access-types.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solace/./modules/solclient-queue/lib/queue-permissions.js","webpack://solace/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-properties.js","webpack://solace/./modules/solclient-queue/lib/queue-types.js","webpack://solace/./modules/solclient-replaystart/api.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solace/./modules/solclient-sdt/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solace/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solace/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field.js","webpack://solace/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solace/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solace/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solace/./modules/solclient-session/api.js","webpack://solace/./modules/solclient-session/lib/authentication-schemes.js","webpack://solace/./modules/solclient-session/lib/capability-types.js","webpack://solace/./modules/solclient-session/lib/correlated-request.js","webpack://solace/./modules/solclient-session/lib/default-capabilities.js","webpack://solace/./modules/solclient-session/lib/global-context.js","webpack://solace/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solace/./modules/solclient-session/lib/host-list.js","webpack://solace/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solace/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solace/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solace/./modules/solclient-session/lib/p2p-util.js","webpack://solace/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solace/./modules/solclient-session/lib/session-event-codes.js","webpack://solace/./modules/solclient-session/lib/session-event-names.js","webpack://solace/./modules/solclient-session/lib/session-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm.js","webpack://solace/./modules/solclient-session/lib/session-operations.js","webpack://solace/./modules/solclient-session/lib/session-properties-validator.js","webpack://solace/./modules/solclient-session/lib/session-properties.js","webpack://solace/./modules/solclient-session/lib/session-request-types.js","webpack://solace/./modules/solclient-session/lib/session-state-names.js","webpack://solace/./modules/solclient-session/lib/session-states.js","webpack://solace/./modules/solclient-session/lib/session.js","webpack://solace/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solace/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solace/./modules/solclient-smf/api.js","webpack://solace/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solace/./modules/solclient-smf/lib/codec/api.js","webpack://solace/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solace/./modules/solclient-smf/lib/codec/decode.js","webpack://solace/./modules/solclient-smf/lib/codec/encode.js","webpack://solace/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solace/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solace/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solace/./modules/solclient-smf/lib/codec/smp.js","webpack://solace/./modules/solclient-smf/lib/codec/transport.js","webpack://solace/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/api.js","webpack://solace/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solace/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solace/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solace/./modules/solclient-smf/lib/smf-protocols.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solace/./modules/solclient-solcache-session/api.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solace/./modules/solclient-stats/api.js","webpack://solace/./modules/solclient-stats/lib/stat-bymode.js","webpack://solace/./modules/solclient-stats/lib/stat-types.js","webpack://solace/./modules/solclient-stats/lib/stats.js","webpack://solace/./modules/solclient-transport/api.js","webpack://solace/./modules/solclient-transport/lib/base-smf-client.js","webpack://solace/./modules/solclient-transport/lib/buffer-queue.js","webpack://solace/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solace/./modules/solclient-transport/lib/smf-client.js","webpack://solace/./modules/solclient-transport/lib/transport-base.js","webpack://solace/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solace/./modules/solclient-transport/lib/transport-error.js","webpack://solace/./modules/solclient-transport/lib/transport-factory.js","webpack://solace/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solace/./modules/solclient-transport/lib/transport-protocols.js","webpack://solace/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event.js","webpack://solace/./modules/solclient-transport/lib/transport-session-states.js","webpack://solace/./modules/solclient-transport/lib/tsh-state.js","webpack://solace/./modules/solclient-transport/lib/web/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solace/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solace/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solace/./modules/solclient-transport/lib/web/state-base64.js","webpack://solace/./modules/solclient-transport/lib/web/state-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solace/./modules/solclient-util/api.js","webpack://solace/./modules/solclient-util/lib/api-properties-validators.js","webpack://solace/./modules/solclient-util/lib/api-properties.js","webpack://solace/./modules/solclient-util/lib/array-utils.js","webpack://solace/./modules/solclient-util/lib/browser-url-polyfill.js","webpack://solace/./modules/solclient-util/lib/process.js","webpack://solace/./modules/solclient-util/lib/string-buffer.js","webpack://solace/./modules/solclient-util/lib/string-utils.js","webpack://solace/./modules/solclient-util/lib/timing-bucket.js","webpack://solace/./modules/solclient-util/lib/url.js","webpack://solace/./modules/solclient-util/lib/uuid.js","webpack://solace/./modules/solclient-util/lib/version.js","webpack://solace/./modules/solclient-validate/api.js","webpack://solace/./modules/solclient-validate/lib/base-checks.js","webpack://solace/./modules/solclient-validate/lib/check.js","webpack://solace/./modules/solclient-validate/lib/parameter.js","webpack://solace/./node_modules/base64-js/index.js","webpack://solace/./node_modules/browser-util-inspect/index.js","webpack://solace/./node_modules/buffer/index.js","webpack://solace/./node_modules/clone/clone.js","webpack://solace/./node_modules/events/events.js","webpack://solace/./node_modules/ieee754/index.js","webpack://solace/./node_modules/long/umd/index.js","webpack://solace/webpack/bootstrap","webpack://solace/webpack/runtime/global","webpack://solace/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"solace\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"solace\"] = factory();\n\telse\n\t\troot[\"solace\"] = factory();\n})(this, () => {\nreturn ","// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  stringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    // 'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to a non-durable Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   *  Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                 169,\n  /**\n   *  Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:             170,\n  /**\n   *  Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:            171,\n  /**\n   *  Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @private\n   */\n  updateAckState(id, state) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats } = require('solclient-stats');\nconst { StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT);\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is  unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return this.transitionTo(fsm.Reconnecting.RBindSent);\n    })\n    ;\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          this._sendAck([[messageID, messageID]]);\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n    this._consumer.incStat(StatType.RX_ACKED);\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      this._sendAck([[messageId, messageId]]);\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT);\n    this._setTransportAckTimer();\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Array.<ackpair>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      currentRange.push(applicationAck);\n      return; // Wait for end of range or flush\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range.\n    if (currentRange.length) {\n      ackRanges.push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n    if (applicationAck === null ||\n        ackRanges.length === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n      // Reduce each range to a first and last ID.\n      const bareRanges = ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n\n      if (bareRanges.length || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n        this._sendAck(bareRanges);\n        // Warning: this log statement reduces debug performance by 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks: ${bareRanges.length\n            ? bareRanges.map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      ackRanges.forEach((ackRange) => {\n        ackRange.forEach((ack) => {\n          if (ack.state !== ApplicationAckState.ACKED_SENT) {\n            try {\n              this._applicationAcks.updateAckState(ack.id,\n                                                   ApplicationAckState.ACKED_SENT);\n            } catch (e) {\n              const { LOG_ERROR } = this.logger;\n              LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n            }\n          }\n        });\n      });\n\n      // Clear the main accumulator since it has hit the wire.\n      acksPendingState.ackRanges = [];\n    }\n    // Clear the accumulator for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [],\n      currentRange:      [],\n    };\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    assert(acksPendingState.ackRanges.length === 0);\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @internal\n   */\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message.acknowledge(); // No, so ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(/*message*/ /*, flags*/) {\n    return ['HTTP Content Type', false, undefined, null];\n  },\n\n  fpHttpContentEncoding(/*message*/ /*, flags*/) {\n    return ['HTTP Content Encoding', false, undefined, null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (Long.isLong(cacheRequestId)) {\n      return ['Cache Request Id', true, cacheRequestId.toString, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const clone = require('clone');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; //Makes the accessor throw, never returned to user.\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n */\nclass Message {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n  /**\n   * Acknowledges this message.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    this._consumer.applicationAck(this._guaranteedMsgId);\n    this._acked = true;\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object.  Upon creation of a queue, undefined queue\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : 'undefined',\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n *@private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisisted.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      //TODO: act on this.\n      // (throw.)\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor,\n        QueueType } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    this.validateAndSendMessage(message);\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   * <br>\n   * <strong>Note:</strong>\n   * The API sets the correlationId and replyTo fields of the message being sent;\n   * this overwrites any existing correlationId and replyTo values on the message.\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(18)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue();\n          const uh = param.getUh();\n          const type = param.getType();\n          for (let i = 0; i < ranges.length; ++i) {\n            const range = ranges[i];\n            paramspace.push(encAdp64AckPairParam(uh,\n                                                 type,\n                                                 range[0],\n                                                 range[1]));\n          }\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    const preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    addContentElementToArrays(csumm, payload,\n                              message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (length < 253) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (length < 256 * 256 - 4) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          smfHeader.pm_ad_publisher_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                       dataBuf.readUInt32BE(pos),\n                                                       true);\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      queueDescriptor.durable // better be...\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Array.<Array.<Long>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `[ [singleMessageId, singleMessageId] ]`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && applicationAckRanges.length) {\n      if (applicationAckRanges.length > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    return this._correlationCounter;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  if (typeof navigator !== 'undefined') {\n      /* eslint-env browser */\n    if (navigator.appVersion.indexOf('MSIE 9.') !== -1 ||\n        navigator.appVersion.indexOf('Trident/') !== -1) {\n        // Avoid the buffer-based version for IE9, 10, and 11, but not Edge.\n      return require('./buffer-smf-client').BufferSMFClient;\n    }\n  }\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\n\nmodule.exports = {\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('clone');\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/* Any copyright is dedicated to the Public Domain.\n * http://creativecommons.org/publicdomain/zero/1.0/ */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-labels */\n/* eslint-env browser */\nmodule.exports = function (scope) {\n  // feature detect for URL constructor\n  let hasWorkingUrl = false;\n  if (!scope.forceJURL) {\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      hasWorkingUrl = u.href === 'http://a/c%20d';\n    } catch (e) {\n      // no problem\n    }\n  }\n\n  if (hasWorkingUrl) {\n    return;\n  }\n\n  // Otherwise the keys get minified.\n  /* eslint-disable dot-notation */\n  const relative = Object.create(null);\n  relative['ftp'] = 21;\n  relative['file'] = 0;\n  relative['gopher'] = 70;\n  relative['http'] = 80;\n  relative['https'] = 443;\n  relative['ws'] = 80;\n  relative['wss'] = 443;\n  /* eslint-enable dot-notation */\n\n  const relativePathDotMapping = Object.create(null);\n  relativePathDotMapping['%2e'] = '.';\n  relativePathDotMapping['.%2e'] = '..';\n  relativePathDotMapping['%2e.'] = '..';\n  relativePathDotMapping['%2e%2e'] = '..';\n\n  function clear() {\n    this._scheme = '';\n    this._schemeData = '';\n    this._username = '';\n    this._password = null;\n    this._host = '';\n    this._port = '';\n    this._path = [];\n    this._query = '';\n    this._fragment = '';\n    this._isInvalid = false;\n    this._isRelative = false;\n  }\n\n  function isRelativeScheme(scheme) {\n    return relative[scheme] !== undefined;\n  }\n\n  function invalid() {\n    clear.call(this);\n    this._isInvalid = true;\n  }\n\n  function IDNAToASCII(h) {\n    if (h === '') {\n      invalid.call(this);\n    }\n    // TODO: more robust\n    return h.toLowerCase();\n  }\n\n  function percentEscape(c) {\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ? `\n       [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  function percentEscapeQuery(c) {\n    // TODO: This actually needs to encode c using encoding and then\n    // convert the bytes one-by-one.\n\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ` (do not escape '?')\n       [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  let EOF;\n  const ALPHA = /[a-zA-Z]/;\n  const ALPHANUMERIC = /[a-zA-Z0-9+\\-.]/;\n\n  function parse(input, stateOverride, base) {\n    const errors = [];\n    function err(message) {\n      errors.push(message);\n    }\n\n    let state = stateOverride || 'scheme start';\n    let cursor = 0;\n    let buffer = '';\n    let seenAt = false;\n    let seenBracket = false;\n\n    loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {\n      const c = input[cursor];\n      switch (state) {\n        case 'scheme start':\n          if (c && ALPHA.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n            state = 'scheme';\n          } else if (!stateOverride) {\n            buffer = '';\n            state = 'no scheme';\n            continue;\n          } else {\n            err('Invalid scheme.');\n            break loop;\n          }\n          break;\n\n        case 'scheme':\n          if (c && ALPHANUMERIC.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n          } else if (c === ':') {\n            this._scheme = buffer;\n            buffer = '';\n            if (stateOverride) {\n              break loop;\n            }\n            if (isRelativeScheme(this._scheme)) {\n              this._isRelative = true;\n            }\n            if (this._scheme === 'file') {\n              state = 'relative';\n            } else if (this._isRelative && base && base._scheme === this._scheme) {\n              state = 'relative or authority';\n            } else if (this._isRelative) {\n              state = 'authority first slash';\n            } else {\n              state = 'scheme data';\n            }\n          } else if (!stateOverride) {\n            buffer = '';\n            cursor = 0;\n            state = 'no scheme';\n            continue;\n          } else if (EOF === c) {\n            break loop;\n          } else {\n            err(`Code point not allowed in scheme: ${c}`);\n            break loop;\n          }\n          break;\n\n        case 'scheme data':\n          if (c === '?') {\n            this._query = '?';\n            state = 'query';\n          } else if (c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            // TODO: error handling\n            this._schemeData += percentEscape(c);\n          }\n          break;\n\n        case 'no scheme':\n          if (!base || !(isRelativeScheme(base._scheme))) {\n            err('Missing scheme.');\n            invalid.call(this);\n          } else {\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative or authority':\n          if (c === '/' && input[cursor + 1] === '/') {\n            state = 'authority ignore slashes';\n          } else {\n            err(`Expected /, got: ${c}`);\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative':\n          this._isRelative = true;\n          if (this._scheme !== 'file') { this._scheme = base._scheme; }\n          if (EOF === c) {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._username = base._username;\n            this._password = base._password;\n            break loop;\n          } else if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') { err('\\\\ is an invalid code point.'); }\n            state = 'relative slash';\n          } else if (c === '?') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = '?';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'query';\n          } else if (c === '#') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._fragment = '#';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'fragment';\n          } else {\n            const nextC = input[cursor + 1];\n            const nextNextC = input[cursor + 2];\n            if (this._scheme !== 'file' || !ALPHA.test(c) ||\n                (nextC !== ':' && nextC !== '|') ||\n                (\n                  EOF !== nextNextC && nextNextC !== '/' &&\n                  nextNextC !== '\\\\' && nextNextC !== '?' && nextNextC !== '#'\n                )\n              ) {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n              this._path = base._path.slice();\n              this._path.pop();\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'relative slash':\n          if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') {\n              err('\\\\ is an invalid code point.');\n            }\n            if (this._scheme === 'file') {\n              state = 'file host';\n            } else {\n              state = 'authority ignore slashes';\n            }\n          } else {\n            if (this._scheme !== 'file') {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'authority first slash':\n          if (c === '/') {\n            state = 'authority second slash';\n          } else {\n            err(`Expected '/', got: ${c}`);\n            state = 'authority ignore slashes';\n            continue;\n          }\n          break;\n\n        case 'authority second slash':\n          state = 'authority ignore slashes';\n          if (c !== '/') {\n            err(`Expected '/', got: ${c}`);\n            continue;\n          }\n          break;\n\n        case 'authority ignore slashes':\n          if (c !== '/' && c !== '\\\\') {\n            state = 'authority';\n            continue;\n          } else {\n            err(`Expected authority, got: ${c}`);\n          }\n          break;\n\n        case 'authority':\n          if (c === '@') {\n            if (seenAt) {\n              err('@ already seen.');\n              buffer += '%40';\n            }\n            seenAt = true;\n            for (let i = 0; i < buffer.length; i++) {\n              const cp = buffer[i];\n              if (cp === '\\t' || cp === '\\n' || cp === '\\r') {\n                err('Invalid whitespace in authority.');\n                continue;\n              }\n              // TODO: check URL code points\n              if (cp === ':' && this._password === null) {\n                this._password = '';\n                continue;\n              }\n              const tempC = percentEscape(cp);\n              if (this._password !== null) {\n                this._password += tempC;\n              } else {\n                this._username += tempC;\n              }\n            }\n            buffer = '';\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            cursor -= buffer.length;\n            buffer = '';\n            state = 'host';\n            continue;\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'file host':\n          if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            if (buffer.length === 2 && ALPHA.test(buffer[0]) &&\n                (buffer[1] === ':' || buffer[1] === '|')) {\n              state = 'relative path';\n            } else if (buffer.length === 0) {\n              state = 'relative path start';\n            } else {\n              this._host = IDNAToASCII.call(this, buffer);\n              buffer = '';\n              state = 'relative path start';\n            }\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err('Invalid whitespace in file host.');\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'host':\n        case 'hostname':\n          if (c === ':' && !seenBracket) {\n            // TODO: host parsing\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'port';\n            if (stateOverride === 'hostname') {\n              break loop;\n            }\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'relative path start';\n            if (stateOverride) {\n              break loop;\n            }\n            continue;\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            if (c === '[') {\n              seenBracket = true;\n            } else if (c === ']') {\n              seenBracket = false;\n            }\n            buffer += c;\n          } else {\n            err(`Invalid code point in host/hostname: ${c}`);\n          }\n          break;\n\n        case 'port':\n          if (/[0-9]/.test(c)) {\n            buffer += c;\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#'\n                     || stateOverride) {\n            if (buffer !== '') {\n              const temp = parseInt(buffer, 10);\n              if (temp !== relative[this._scheme]) {\n                this._port = `${temp}`;\n              }\n              buffer = '';\n            }\n            if (stateOverride) {\n              break loop;\n            }\n            state = 'relative path start';\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err(`Invalid code point in port: ${c}`);\n          } else {\n            invalid.call(this);\n          }\n          break;\n\n        case 'relative path start':\n          if (c === '\\\\') {\n            err(\"'\\\\' not allowed in path.\");\n          }\n          state = 'relative path';\n          if (c !== '/' && c !== '\\\\') {\n            continue;\n          }\n          break;\n\n        case 'relative path':\n          if (EOF === c || c === '/' || c === '\\\\' ||\n              (!stateOverride && (c === '?' || c === '#'))) {\n            if (c === '\\\\') {\n              err('\\\\ not allowed in relative path.');\n            }\n            const tmp = relativePathDotMapping[buffer.toLowerCase()];\n            if (tmp) {\n              buffer = tmp;\n            }\n            if (buffer === '..') {\n              this._path.pop();\n              if (c !== '/' && c !== '\\\\') {\n                this._path.push('');\n              }\n            } else if (buffer === '.' && c !== '/' && c !== '\\\\') {\n              this._path.push('');\n            } else if (buffer !== '.') {\n              if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 &&\n                  ALPHA.test(buffer[0]) && buffer[1] === '|') {\n                buffer = `${buffer[0]}:`;\n              }\n              this._path.push(buffer);\n            }\n            buffer = '';\n            if (c === '?') {\n              this._query = '?';\n              state = 'query';\n            } else if (c === '#') {\n              this._fragment = '#';\n              state = 'fragment';\n            }\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            buffer += percentEscape(c);\n          }\n          break;\n\n        case 'query':\n          if (!stateOverride && c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._query += percentEscapeQuery(c);\n          }\n          break;\n\n        case 'fragment':\n          if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._fragment += c;\n          }\n          break;\n\n        default:\n      }\n\n      cursor++;\n    }\n  }\n\n\n  // Does not process domain names or IP addresses.\n  // Does not handle encoding for the query parameter.\n  /* eslint-disable no-param-reassign */\n  function PolyfillURL(url, base /* , encoding */) {\n    if (base !== undefined && !(base instanceof PolyfillURL)) {\n      base = new PolyfillURL(String(base));\n    }\n\n    url = String(url);\n    this._url = url;\n    clear.call(this);\n\n    const input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, '');\n    // encoding = encoding || 'utf-8'\n\n    parse.call(this, input, null, base);\n  }\n\n  PolyfillURL.prototype = {\n    toString() {\n      return this.href;\n    },\n    get href() {\n      if (this._isInvalid) { return this._url; }\n\n      let authority = '';\n      if (this._username !== '' || this._password !== null) {\n        authority = `${this._username +\n            (this._password !== null ? `:${this._password}` : '')}@`;\n      }\n\n      return this.protocol +\n          (this._isRelative ? `//${authority}${this.host}` : '') +\n          this.pathname + this._query + this._fragment;\n    },\n    set href(href) {\n      clear.call(this);\n      parse.call(this, href);\n    },\n\n    get protocol() {\n      return `${this._scheme}:`;\n    },\n    set protocol(protocol) {\n      if (this._isInvalid) { return; }\n      parse.call(this, `${protocol}:`, 'scheme start');\n    },\n\n    get host() {\n      if (this._isInvalid) return '';\n      if (this._port) return `${this._host}:${this._port}`;\n      return this._host;\n    },\n    set host(host) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, host, 'host');\n    },\n\n    get hostname() {\n      return this._host;\n    },\n    set hostname(hostname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, hostname, 'hostname');\n    },\n\n    get port() {\n      return this._port;\n    },\n    set port(port) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, port, 'port');\n    },\n\n    get pathname() {\n      if (this._isInvalid) return '';\n      if (this._isRelative) return `/${this._path.join('/')}`;\n      return this._schemeData;\n    },\n    set pathname(pathname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._path = [];\n      parse.call(this, pathname, 'relative path start');\n    },\n\n    get search() {\n      return this._isInvalid || !this._query || this._query === '?' ?\n          '' : this._query;\n    },\n    set search(search) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._query = '?';\n      if (search[0] === '?') { search = search.slice(1); }\n      parse.call(this, search, 'query');\n    },\n\n    get hash() {\n      return this._isInvalid || !this._fragment || this._fragment === '#' ?\n          '' : this._fragment;\n    },\n    set hash(hash) {\n      if (this._isInvalid) { return; }\n      this._fragment = '#';\n      if (hash[0] === '#') { hash = hash.slice(1); }\n      parse.call(this, hash, 'fragment');\n    },\n\n    get origin() {\n      if (this._isInvalid || !this._scheme) {\n        return '';\n      }\n      // javascript: Gecko returns String(\"\"), WebKit/Blink String(\"null\")\n      // Gecko throws error for \"data://\"\n      // data: Gecko returns \"\", Blink returns \"data://\", WebKit returns \"null\"\n      // Gecko returns String(\"\") for file: mailto:\n      // WebKit/Blink returns String(\"SCHEME://\") for file: mailto:\n      switch (this._scheme) {\n        case 'data':\n        case 'file':\n        case 'javascript':\n        case 'mailto':\n          return 'null';\n        default:\n      }\n      const host = this.host;\n      if (!host) {\n        return '';\n      }\n      return `${this._scheme}://${host}`;\n    },\n  };\n\n  // Copy over the static methods\n  const OriginalURL = scope.URL;\n  if (OriginalURL) {\n    PolyfillURL.createObjectURL = function createObjectURL(...args) {\n      // IE extension allows a second optional options argument.\n      // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx\n      return OriginalURL.createObjectURL(...args);\n    };\n    PolyfillURL.revokeObjectURL = function revokeObjectURL(url) {\n      OriginalURL.revokeObjectURL(url);\n    };\n  }\n\n  scope.URL = PolyfillURL;\n};\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/**\n * Module exports.\n */\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n * @license MIT (© Joyent)\n */\n/* legacy: obj, showHidden, depth, colors*/\n\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nfunction hasOwn(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwn(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  try {\n    if (ctx.showHidden && Object.getOwnPropertyNames) {\n      keys = Object.getOwnPropertyNames(value);\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (Array.isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = { value: void 0 };\n  try {\n    // ie6 › navigator.toString\n    // throws Error: Object doesn't support this property or method\n    desc.value = value[key];\n  } catch (e) {\n    // ignore\n  }\n  try {\n    // ie10 › Object.getOwnPropertyDescriptor(window.location, 'hash')\n    // throws TypeError: Object doesn't support this action\n    if (Object.getOwnPropertyDescriptor) {\n      desc = Object.getOwnPropertyDescriptor(value, key) || desc;\n    }\n  } catch (e) {\n    // ignore\n  }\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwn(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6010);\n"],"names":["root","factory","exports","module","define","amd","this","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBlob","Blob","BufferEncoder","Buffer","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","ARRAY_BUFFER_CONVERT_CHUNK","stringToUint8Array","data","dataLength","arrayBuf","ArrayBuffer","uint8Array","Uint8Array","int32ToStr","int32","strToUInt32","arrayBufferToString","ab","len","byteLength","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","int8ToStr","int8","strToInt8","int16ToStr","int16","strToInt16","int24ToStr","int24","strToInt24","strToInt32","int64ToStr","int64","high","low","strToUInt64","fromBits","substr","byteArrayToStr","byteArray","slice","strToByteArray","result","strToHexArray","Array","prototype","map","call","split","c","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","solace","_internal","Object","assign","PRINTABLE_LUT","tmp","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","dataLen","ccode","append","clear","parseSMFStream","Codec","Decode","decodeCompoundMessage","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","topicName","isString","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","createDestinationFromName","networkTopicName","networkTopicBytes","undefined","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","createTemporaryName","vrid","id","generateUUID","describe","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","static","encoding","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","NOEXPORT_PREFIX","NOEXPORT_PREFIX_LEN","index","isNoExport","SHARE_PREFIX","SHARE_PREFIX_LEN","LEVEL_DELIMETER_LEN","shareGroup","groupIndex","isShare","indexOf","substring","dispatchTopicIndex","parse","layers","parseLayers","constOffset","constResult","subscriptionStringParse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","getSubcodeMappingInner","respErrorCode","respStr","codeMap","searchKey","toLowerCase","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","REPLAY_TEMPORARY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","requestEventCode","_requestEventCode","errorSubcode","superObj","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","p","setValues","key","enumName","instance","matches","filter","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","names","Set","isEnum","strings","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","source","compoundKey","trim","rawPath","path","pathArr","concat","commonSource","keySource","reduce","traversePath","inplaceUnion","setA","setB","elem","inplaceDifference","delete","inplaceIntersection","has","isSuperset","subset","every","difference","intersection","union","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","DISABLED_ACTIONS","ignore","fail","direct","emits","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","emitSet","el","emitArray","buildFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","firstDirect","_onFirstDirectListener","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","isDirect","disableEmitter","cancel","interval","onInterval","timerRef","setInterval","clearInterval","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","legacyInstance","v10Instance","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","profile","_profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","LOG_DEBUG","reset","_getInitializeCount","profiles","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","LOG_TRACE","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","canAck","disposed","flowId","session","_session","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","innerState","entryPointName","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","_onEventCompletion","getCurrentState","currentState","evt","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","addGlobalFuncs","toUpperCase","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","newLevel","Binding","formatter","_formatter","genericFunction","targetSelf","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","g","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","exists","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evicting","front","firstIndex","rawIndex","lastIndex","callback","updateAckState","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","flows","reconnectingFlows","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","emitBindFailed","CONNECT_FAILED_ERROR","checkCapabilitiesChoicePoint","isCapable","MESSAGE_REPLAY","topicEndpointSubscription","destination","SHARED_SUBSCRIPTIONS","verifyEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","_addEventToEmit","activeIndicationEnabled","_requestStartDispatch","_requestStopDispatch","requestStopDispatchFSM","transitionToUnbound","_dispose","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","handleAccidentalBind","connectTimeoutInMsecs","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","partitionGroupId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","x","getAccessType","EXCLUSIVE","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","respEvent","BIND_SENT","newTimeout","UnbindSent","FlowUp","Reconnecting","reconnectAttempts","RBindSent","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","emitRebindFailed","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","_setTransportAckTimer","_sendAck","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","RX_ACKED","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","MAX_CLIENT_ACK_RANGES","bareRanges","range","forceTransportAck","setAcked","ackRange","maxWindowSize","Math","Number","POSITIVE_INFINITY","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","updateQueueSubscription","success","subCode","respCode","respText","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","acknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","lastSent","setLastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","publisherId","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","FAILED","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","fpHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","getUserCos","fpDeliveryMode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","mdu","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","fpXmlMetadata","xmlMetadata","getXmlMetadata","MessageDumpStandardProviderLib","MessageDumpState","dumpProviders","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","provider","isPresent","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isBoolean","isInstanceOfOrNothing","isNumberOrNothing","isStringOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","binaryMetadataChunk","_binaryMetaChunk","meta","_smfHeader","hasAutoSequenceNumber","hasAutoSenderTimestamp","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","validFlags","f","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","ReplayStartType","RMID_VERSION_1_PREFIX","RMID_LEN","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","hexString","toBytesBE","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","queueSpec","maybeAdaptFromDestination","_durable","NONEXCLUSIVE","valTopicString","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","encodeHeader","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","int48ToStr","encodeStream","C_2_48","pow","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","onebyte","elemType","lenBytes","elemLen","ParseFloat","readFloatBE","readDoubleBE","createField","readUIntBE","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","datalen","mapObj","keyFieldHeader","parseFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseFloatField","parseIntegerField","parseMapAt","parseStreamAt","parseDestination","fieldHeader","elemValLen","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","UNBIND_ACK","BR_ERRORID","PQ","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","GlobalContext","sessionCounter","idCounter","RandId","random","toFixed","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","urls","cb","url","host","address","resolved","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","code","syscall","hostname","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","connectWaitTimeInMsecs","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","sessionEventCode","_sessionEventCode","errorSubCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","SessionFSMEvent","fields","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","SessionFSM","stats","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","updateTransportCompression","newTransport","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","sendConsumerSessionUpEvent","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","match","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","valArrayIsMember","valArrayOfString","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valUrlList","valArray","included","protocol","useSsl","all","regex","arrayLength","currententry","string","matchUrl","SessionPropertiesValidator","transportProtocol","webTransportProtocolList","useClientCert","authenticationScheme","equal","empty","idToken","accessToken","nonHttpPropsSet","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","isHttpTransport","propNames","validatePropsSupportedByTransport","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","SessionPropertiesBase","_tpProtocol","_tpDowngradeTimeout","_transportProtocolList","bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryInterval","transportProtocolInUse","_tpProtocolInUse","_setTransportProtocolInUse","webTransportProtocolInUse","_setWebTransportProtocolInUse","transportContentType","_tpContentType","_lendsInspect","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_publisherProperties","makeDefaults","_authScheme","_accessToken","_idToken","issuerIdentifier","_issuerIdentifier","_url","password","_password","userName","_userName","clientName","_clientName","applicationDescription","_appDesc","vpnName","_vpnName","vpnNameInUse","_connectTimeout","transportCount","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","generateSendTimestamps","_genSendTimestamps","generateReceiveTimestamps","_genReceiveTimestamps","includeSenderId","_includeSenderId","generateSequenceNumber","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","p2pInboxInUse","userIdentification","_setUserIdentification","subscriberLocalPriority","_subLocalPriority","subscriberNetworkPriority","_subNetworkPriority","ignoreDuplicateSubscriptionError","_ignoreDupSubError","ignoreSubscriptionNotFoundError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","sendBufferMaxSize","_sendBufferMaxSize","_assumedMaxAdSize","maxWebPayload","_maxWebPayload","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","WS_BINARY","xhrBinary","streaming","transportProtocolDefaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","createFromSpec","handleDTEUnsubscribeResponse","updateProperty","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","smpResp","resp","afterRemoveCallback","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","getSessionState","getTransportProtocol","capabilityType","isNumber","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","browserProperties","destinationType","vrn","localName","operationEnum","allow","anything","NEW","routerCapabilities","sendDest","noSenderTimestamp","senderTimestamp","now","noSequenceNumber","sequenceNumber","noSenderId","senderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","encAdp0Param","uh","paramtype","byte1","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","encAdpUTF8NTParam","byte2","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramValueLen","paramLen","smfParam","addParameter","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","version","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","payloadPosition","headerLength","payloadLength","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","payloadOffset","cs","pm_content_summary","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","adaptSmfToMessage","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","encodedSdtPayload","sdtPreamble","sdtStreamContainer","adaptMessageToBinaryMeta","binaryMetaSMF","asEncodedSmf","MAX_24BITS","maskValues","bitRange","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","pm_queue_len","LIGHT_QUEUE_NAME_OFFSET","pm_queue_offset","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","pm_ad_ackimm","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","smfHeaderIn","payloadBytes","adaptMessageToSmf_payloadFinalize","pm_ad_publishermsgId","userData","adaptMessageToSmf_nonPayload","setPayloadSize","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeCount","lenMap","idx","lightMap","lenCount","ContentSummaryDecodeMap","delmode","lookup","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","firstByte","lengthModeMap","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","isSMFHeaderValid","parseSMFExtendedStream","streamLen","pUH","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","isSMFAvailable","remaining","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parseTopicQueueOffsets","parsedTopicOffsets","pStart","pType","pValueLen","pLen","pm_ad_publisher_id","parsedResponse","parseResponseParam","SUB_ID_LIST","GENERIC_ATTACHMENT","parseDeliveryMode","AD_TOPICSEQUENCE_NUMBER","contentSummary","parseContentSummary","AD_FLOWREDELIVERED_FLAG","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","endpointBytes","endpointType","rsValue","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","dto","local","network","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","capLen","sprop","compressedTLS","plaintextTLS","cc","isClientCert","DELIVERTOONEPRIORITY","prmGetDtoPriorityValue","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","mode","formattedDate","SSL_DOWNGRADE","clientCaps","clientCapList","highestCap","capBits","cap","clientCapsToStr","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","PARTITION_KEY_HASH","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","logPeekBuffer","bufPair","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","navigator","appVersion","TransportBase","eventCB","client","transportProps","_ssl","_client","_eventCB","_props","immediate","forceFailure","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","WebTransportCapabilities","TransportClientStats","TcpRawTransport","CompressedTransport","TlsOnlyTransport","TcpTlsTransport","WebTransport","getId","compressingLayer","plaintextTransport","setClientStats","setUnderlyingTransport","tlsLayer","uncompressedTransport","rehome","encryptedTransport","compress","precallback","tlsShutdown","WebTransportsLib","lutTransportProtocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","useSSL","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","INVALID_STATE_FOR_OPERATION","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","TransportSessionEvent","tsEventCode","_transportEventCode","_sid","transportEventCode","getResponseCode","TransportSessionState","WAITING_FOR_CREATE","WAITING_FOR_DESTROY","CONNECTION_FAILED","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","prependOrigin","location","origin","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","xhr","check","onprogress","WebTransportSessionBase","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","_state","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_clientstats","_queuedDataSize","initPreformattedHeaders","_flushCallback","sendQueuedData","getQueuedDataToSend","_canSendNeeded","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","setRequestHeader","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","WebSocketTransportSession","browserSupportsBinaryWebSockets","browserSupportsStreamingResponse","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","bytesAllowed","getBufferedAmount","_bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryIntervalDelayMultiplier","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_transportSession","_lastDowngradeSucceeded","errorMsg","_socket","_sender","WebSocketCloseCodes","MyWebSocket","WebSocket","adaptURL","_bufferedAmountQueryTimer","onOpen","onClose","originalSocket","msgBuf","wasClean","onDrain","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","onError","WAITING_FOR_CONNECT","onMessage","binaryType","onopen","onmessage","onclose","onerror","force","bufferAllow","maxPayloadBytes","close","cancelQuery","validator","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","typedesc","cloneObj","acc","scope","hasWorkingUrl","forceJURL","u","URL","pathname","relative","relativePathDotMapping","_scheme","_schemeData","_username","_host","_port","_path","_query","_fragment","_isInvalid","_isRelative","isRelativeScheme","scheme","IDNAToASCII","percentEscape","unicode","percentEscapeQuery","EOF","ALPHA","ALPHANUMERIC","stateOverride","errors","cursor","seenAt","seenBracket","loop","nextC","nextNextC","cp","tempC","temp","PolyfillURL","authority","port","search","hash","OriginalURL","createObjectURL","revokeObjectURL","WINDOWS_VERSION_MAP","BROWSER_PROCESS","safeEncode","browserAgentInfo","agentStr","agentInfo","os","arch","agentHas","strs","firstValue","vals","rule","exec","versionTest","versionPart","versionMatch","getBrowserAgentInfo","arg","PAD_LEFT","PAD_RIGHT","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","FORMATTED_DATE","pad","SUMMARY","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","then","elseFn","when","condition","unless","NO_OBJ","subcodeSummary","got","expectedStr","gotStr","validatorArgs","validateError","typename","memberOfEnum","memberOf","objectValues","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","parts","maxChunkLength","len2","encodeChunk","num","opts","ctx","seen","stylize","stylizeNoColor","depth","colors","showHidden","isObject","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","style","styles","isNull","hasOwn","prop","isRegExp","re","objectToString","isError","isDate","o","formatError","recurseTimes","primitive","simple","JSON","stringify","formatPrimitive","visibleKeys","arrayToHash","RegExp","braces","toUTCString","l","formatProperty","formatArray","prev","cur","reduceToSingleString","base64","ieee754","customInspectSymbol","Symbol","K_MAX_LENGTH","createBuffer","RangeError","setPrototypeOf","encodingOrOffset","TypeError","isEncoding","actual","write","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","read","foundIndex","found","hexWrite","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","res","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","poolSize","alloc","allocUnsafeSlow","_isBuffer","y","swap16","swap32","swap64","toLocaleString","thisStart","thisEnd","thisCopy","targetCopy","isFinite","toJSON","out","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","readUIntLE","mul","readUintBE","readUint8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt16LE","readInt32LE","readBigInt64LE","readBigInt64BE","readFloatLE","readDoubleLE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","E","sym","getMessage","Base","addNumericalSeparator","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","received","isInteger","INVALID_BASE64_RE","leadSurrogate","base64clean","src","dst","alphabet","table","i16","BufferBigIntNotDefined","_instanceof","nativeMap","nativeSet","nativePromise","Promise","allParents","allChildren","useBuffer","_clone","reject","__isArray","__isRegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","__objToStr","global","ignoreCase","multiline","clonePrototype","ReflectOwnKeys","R","Reflect","ReflectApply","receiver","ownKeys","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","handler","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","warning","newListener","unshift","warned","w","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","addEventListener","wrapListener","removeEventListener","setMaxListeners","getMaxListeners","doError","er","listeners","originalListener","spliceOne","off","rawListeners","eventNames","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","wasm","WebAssembly","Instance","Module","unsigned","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","ceil","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis"],"sourceRoot":""}