{"version":3,"file":"solclient-full.js","mappings":";;;;YAEAA,OAAOC,UAAU,oBAAjB;;;YCFA,MAAQC,SAAW,oBAAQ,2CAAc,EAAjCA;YACR,MAAQC,OAAS,oBAAQ,yCAAY,EAA7BA;YACR,MAAQC,UAAY,oBAAQ,4CAAe,EAAnCA;YACR,MAAQC,MAAQ,oBAAQ,wCAAW,EAA3BA;YACR,MAAQC,OAAS,oBAAQ,yCAAY,EAA7BA;YAERN,OAAOC,QAAQC,SAASA;YACxBF,OAAOC,QAAQE,OAAOA;YACtBH,OAAOC,QAAQG,UAAUA;YACzBJ,OAAOC,QAAQI,MAAMA;YACrBL,OAAOC,QAAQK,OAAOA;;;YCAtB,MAAMC,UAAU;YAChB,MAAMC,UAAU,EACd,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GACtB,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IACzB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,C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","sources":["webpack://solclientjs/./index.js","webpack://solclientjs/./modules/solclient-convert/api.js","webpack://solclientjs/./modules/solclient-convert/lib/base64.js","webpack://solclientjs/./modules/solclient-convert/lib/bits.js","webpack://solclientjs/./modules/solclient-convert/lib/convert.js","webpack://solclientjs/./modules/solclient-convert/lib/hex.js","webpack://solclientjs/./modules/solclient-convert/lib/long.js","webpack://solclientjs/./modules/solclient-core/api-internal.js","webpack://solclientjs/./modules/solclient-core/api.js","webpack://solclientjs/./modules/solclient-debug/api.js","webpack://solclientjs/./modules/solclient-debug/lib/debug.js","webpack://solclientjs/./modules/solclient-destination/api.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-from-network.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-type.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-util.js","webpack://solclientjs/./modules/solclient-destination/lib/destination.js","webpack://solclientjs/./modules/solclient-destination/lib/queue.js","webpack://solclientjs/./modules/solclient-destination/lib/subscription-info.js","webpack://solclientjs/./modules/solclient-destination/lib/topic.js","webpack://solclientjs/./modules/solclient-env/api.js","webpack://solclientjs/./modules/solclient-error/api.js","webpack://solclientjs/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solclientjs/./modules/solclient-error/lib/error-subcodes.js","webpack://solclientjs/./modules/solclient-error/lib/not-implemented-error.js","webpack://solclientjs/./modules/solclient-error/lib/operation-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-event-codes.js","webpack://solclientjs/./modules/solclient-error/lib/solace-error.js","webpack://solclientjs/./modules/solclient-eskit/api.js","webpack://solclientjs/./modules/solclient-eskit/lib/array-operations.js","webpack://solclientjs/./modules/solclient-eskit/lib/assert.js","webpack://solclientjs/./modules/solclient-eskit/lib/bidi-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/enum.js","webpack://solclientjs/./modules/solclient-eskit/lib/iterator.js","webpack://solclientjs/./modules/solclient-eskit/lib/lazy.js","webpack://solclientjs/./modules/solclient-eskit/lib/make-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/mixin.js","webpack://solclientjs/./modules/solclient-eskit/lib/resolver.js","webpack://solclientjs/./modules/solclient-eskit/lib/set-operations.js","webpack://solclientjs/./modules/solclient-events/api.js","webpack://solclientjs/./modules/solclient-events/lib/event-emitter.js","webpack://solclientjs/./modules/solclient-events/lib/timer.js","webpack://solclientjs/./modules/solclient-factory/api.js","webpack://solclientjs/./modules/solclient-factory/lib/profile-binding.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory.js","webpack://solclientjs/./modules/solclient-flow/api.js","webpack://solclientjs/./modules/solclient-flow/lib/flow-operation.js","webpack://solclientjs/./modules/solclient-flow/lib/flow.js","webpack://solclientjs/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solclientjs/./modules/solclient-fsm/api.js","webpack://solclientjs/./modules/solclient-fsm/lib/entry-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/event.js","webpack://solclientjs/./modules/solclient-fsm/lib/exit-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/object.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-context.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-machine.js","webpack://solclientjs/./modules/solclient-fsm/lib/state.js","webpack://solclientjs/./modules/solclient-log/api.js","webpack://solclientjs/./modules/solclient-log/lib/console-log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/global-binding.js","webpack://solclientjs/./modules/solclient-log/lib/log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/log-levels.js","webpack://solclientjs/./modules/solclient-message-consumer/api.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solclientjs/./modules/solclient-message-publisher/api.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solclientjs/./modules/solclient-message/api.js","webpack://solclientjs/./modules/solclient-message/lib/message-cache-status.js","webpack://solclientjs/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-flags.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-util.js","webpack://solclientjs/./modules/solclient-message/lib/message-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solclientjs/./modules/solclient-message/lib/message.js","webpack://solclientjs/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solclientjs/./modules/solclient-queue/api.js","webpack://solclientjs/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-access-types.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-permissions.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-types.js","webpack://solclientjs/./modules/solclient-replaystart/api.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solclientjs/./modules/solclient-sdt/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solclientjs/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solclientjs/./modules/solclient-session/api.js","webpack://solclientjs/./modules/solclient-session/lib/authentication-schemes.js","webpack://solclientjs/./modules/solclient-session/lib/capability-types.js","webpack://solclientjs/./modules/solclient-session/lib/correlated-request.js","webpack://solclientjs/./modules/solclient-session/lib/default-capabilities.js","webpack://solclientjs/./modules/solclient-session/lib/global-context.js","webpack://solclientjs/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solclientjs/./modules/solclient-session/lib/host-list.js","webpack://solclientjs/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solclientjs/./modules/solclient-session/lib/p2p-util.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-codes.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm.js","webpack://solclientjs/./modules/solclient-session/lib/session-operations.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties-validator.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/session-request-types.js","webpack://solclientjs/./modules/solclient-session/lib/session-state-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-states.js","webpack://solclientjs/./modules/solclient-session/lib/session.js","webpack://solclientjs/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solclientjs/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solclientjs/./modules/solclient-smf/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/decode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/encode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/smp.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/transport.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/api.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-protocols.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solclientjs/./modules/solclient-solcache-session/api.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solclientjs/./modules/solclient-stats/api.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-bymode.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-types.js","webpack://solclientjs/./modules/solclient-stats/lib/stats.js","webpack://solclientjs/./modules/solclient-transport/api.js","webpack://solclientjs/./modules/solclient-transport/lib/base-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-queue.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/node-tls-opts-mixin.js","webpack://solclientjs/./modules/solclient-transport/lib/smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/api.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/shuntable-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-compression.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-plaintext.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-base.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-error.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocols.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-states.js","webpack://solclientjs/./modules/solclient-transport/lib/tsh-state.js","webpack://solclientjs/./modules/solclient-transport/lib/web/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-base64.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solclientjs/./modules/solclient-util/api.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties-validators.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties.js","webpack://solclientjs/./modules/solclient-util/lib/array-utils.js","webpack://solclientjs/./modules/solclient-util/lib/process.js","webpack://solclientjs/./modules/solclient-util/lib/string-buffer.js","webpack://solclientjs/./modules/solclient-util/lib/string-utils.js","webpack://solclientjs/./modules/solclient-util/lib/timing-bucket.js","webpack://solclientjs/./modules/solclient-util/lib/url.js","webpack://solclientjs/./modules/solclient-util/lib/uuid.js","webpack://solclientjs/./modules/solclient-util/lib/version.js","webpack://solclientjs/./modules/solclient-validate/api.js","webpack://solclientjs/./modules/solclient-validate/lib/base-checks.js","webpack://solclientjs/./modules/solclient-validate/lib/check.js","webpack://solclientjs/./modules/solclient-validate/lib/parameter.js","webpack://solclientjs/./node_modules/clone/clone.js","webpack://solclientjs/./node_modules/ws/index.js","webpack://solclientjs/./node_modules/ws/lib/buffer-util.js","webpack://solclientjs/./node_modules/ws/lib/constants.js","webpack://solclientjs/./node_modules/ws/lib/event-target.js","webpack://solclientjs/./node_modules/ws/lib/extension.js","webpack://solclientjs/./node_modules/ws/lib/limiter.js","webpack://solclientjs/./node_modules/ws/lib/permessage-deflate.js","webpack://solclientjs/./node_modules/ws/lib/receiver.js","webpack://solclientjs/./node_modules/ws/lib/sender.js","webpack://solclientjs/./node_modules/ws/lib/stream.js","webpack://solclientjs/./node_modules/ws/lib/subprotocol.js","webpack://solclientjs/./node_modules/ws/lib/validation.js","webpack://solclientjs/./node_modules/ws/lib/websocket-server.js","webpack://solclientjs/./node_modules/ws/lib/websocket.js","webpack://solclientjs/external commonjs2 \"bufferutil\"","webpack://solclientjs/external commonjs2 \"utf-8-validate\"","webpack://solclientjs/external node-commonjs \"buffer\"","webpack://solclientjs/external node-commonjs \"constants\"","webpack://solclientjs/external node-commonjs \"crypto\"","webpack://solclientjs/external node-commonjs \"dns\"","webpack://solclientjs/external node-commonjs \"events\"","webpack://solclientjs/external node-commonjs \"fs\"","webpack://solclientjs/external node-commonjs \"http\"","webpack://solclientjs/external node-commonjs \"https\"","webpack://solclientjs/external node-commonjs \"net\"","webpack://solclientjs/external node-commonjs \"os\"","webpack://solclientjs/external node-commonjs \"stream\"","webpack://solclientjs/external node-commonjs \"tls\"","webpack://solclientjs/external node-commonjs \"url\"","webpack://solclientjs/external node-commonjs \"zlib\"","webpack://solclientjs/./node_modules/long/umd/index.js","webpack://solclientjs/webpack/bootstrap","webpack://solclientjs/webpack/startup"],"sourcesContent":["// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  stringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    // 'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to a non-durable Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   *  Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                 169,\n  /**\n   *  Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:             170,\n  /**\n   *  Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:            171,\n  /**\n   *  Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @private\n   */\n  updateAckState(id, state) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats } = require('solclient-stats');\nconst { StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT);\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is  unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return this.transitionTo(fsm.Reconnecting.RBindSent);\n    })\n    ;\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          this._sendAck([[messageID, messageID]]);\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n    this._consumer.incStat(StatType.RX_ACKED);\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      this._sendAck([[messageId, messageId]]);\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT);\n    this._setTransportAckTimer();\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Array.<ackpair>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      currentRange.push(applicationAck);\n      return; // Wait for end of range or flush\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range.\n    if (currentRange.length) {\n      ackRanges.push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n    if (applicationAck === null ||\n        ackRanges.length === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n      // Reduce each range to a first and last ID.\n      const bareRanges = ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n\n      if (bareRanges.length || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n        this._sendAck(bareRanges);\n        // Warning: this log statement reduces debug performance by 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks: ${bareRanges.length\n            ? bareRanges.map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      ackRanges.forEach((ackRange) => {\n        ackRange.forEach((ack) => {\n          if (ack.state !== ApplicationAckState.ACKED_SENT) {\n            try {\n              this._applicationAcks.updateAckState(ack.id,\n                                                   ApplicationAckState.ACKED_SENT);\n            } catch (e) {\n              const { LOG_ERROR } = this.logger;\n              LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n            }\n          }\n        });\n      });\n\n      // Clear the main accumulator since it has hit the wire.\n      acksPendingState.ackRanges = [];\n    }\n    // Clear the accumulator for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [],\n      currentRange:      [],\n    };\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    assert(acksPendingState.ackRanges.length === 0);\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @internal\n   */\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message.acknowledge(); // No, so ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(/*message*/ /*, flags*/) {\n    return ['HTTP Content Type', false, undefined, null];\n  },\n\n  fpHttpContentEncoding(/*message*/ /*, flags*/) {\n    return ['HTTP Content Encoding', false, undefined, null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (Long.isLong(cacheRequestId)) {\n      return ['Cache Request Id', true, cacheRequestId.toString, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const clone = require('clone');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; //Makes the accessor throw, never returned to user.\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n */\nclass Message {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n  /**\n   * Acknowledges this message.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    this._consumer.applicationAck(this._guaranteedMsgId);\n    this._acked = true;\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object.  Upon creation of a queue, undefined queue\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : 'undefined',\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n *@private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisisted.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      //TODO: act on this.\n      // (throw.)\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor,\n        QueueType } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    this.validateAndSendMessage(message);\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   * <br>\n   * <strong>Note:</strong>\n   * The API sets the correlationId and replyTo fields of the message being sent;\n   * this overwrites any existing correlationId and replyTo values on the message.\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(18)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue();\n          const uh = param.getUh();\n          const type = param.getType();\n          for (let i = 0; i < ranges.length; ++i) {\n            const range = ranges[i];\n            paramspace.push(encAdp64AckPairParam(uh,\n                                                 type,\n                                                 range[0],\n                                                 range[1]));\n          }\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    const preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    addContentElementToArrays(csumm, payload,\n                              message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (length < 253) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (length < 256 * 256 - 4) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          smfHeader.pm_ad_publisher_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                       dataBuf.readUInt32BE(pos),\n                                                       true);\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      queueDescriptor.durable // better be...\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Array.<Array.<Long>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `[ [singleMessageId, singleMessageId] ]`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && applicationAckRanges.length) {\n      if (applicationAckRanges.length > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    return this._correlationCounter;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","const fs = require('fs');\nconst SolclientSessionLib = require('solclient-session');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\n/**\n * Node TLS socket option generation factored out from WS transport, shared with Tcp transport.\n * Internal mixin class, not intended to be publicly visible.\n * @private\n */\n\nclass NodeTLSOptsMixin {\n  /**\n   * Overwrite Node.js default hostname check callback by verifying cnNameList against subject CN\n   * in the server certificate. If cnNameList is a empty string, it means all CNs are acceptable.\n   * @param {String} host The hostname for checking\n   * @param {String} cert The server certificate for checking\n   * @name solace.WebTransportSession#checkCertificateCNs\n   * @returns {?Error} Any error generated by the certificate check\n   * @private\n   */\n  checkCertificateCNs(host, cert) {\n    if (this._props.sslTrustedCommonNameList && this._props.sslTrustedCommonNameList.length > 0) {\n      // no Closure Compiler externs for certificates\n      LOG_DEBUG('server cert:', cert);\n      const subject = cert['subject']; // eslint-disable-line dot-notation\n      let valid = false;\n      if (subject) {\n        const cn = subject['CN']; // eslint-disable-line dot-notation\n        valid = this._props.sslTrustedCommonNameList.some(name =>\n          name.toLowerCase() === cn.toLowerCase()\n        );\n      }\n      if (!valid) {\n        const error = new Error('Server certificate not trusted - no common name match');\n        error.reason = 'Server certificate not trusted - no common name match';\n        error.host = host;\n        error.cert = cert;\n        return error;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Create the TLS options object used in wss:// and tcps:// connection establishment.\n   * The same options are needed by the ws and tls socket constructors.\n   * @returns {Object} WebSocket/TLSSocket options object\n   * @private\n   */\n  createTLSOptions() {\n    /* eslint-disable dot-notation */\n    const props = this._props;\n    const options = {};\n    const useClientCert = (\n      props.authenticationScheme === SolclientSessionLib.AuthenticationScheme.CLIENT_CERTIFICATE\n    );\n\n    // available tls options:\n    //  pfx, key, passphrase, cert, ca, ciphers, rejectUnauthorized,\n    //  secureProtocol, secureOptions, checkServerIdentity\n\n    // default to allow all version of SSL during negotiation but exclude SSLv2 and SSLv3\n    options['secureProtocol'] = 'SSLv23_method';\n    const constMap = SolclientSessionLib.SessionProperties.SslProtocolExcludeConstantMap;\n    options['secureOptions'] = constMap['sslv2'] | constMap['sslv3'];\n    (props.sslExcludedProtocols || []).forEach((protocol) => {\n      options['secureOptions'] |= constMap[protocol.toLowerCase()];\n    });\n\n    if (props.sslCipherSuites) {\n      const ciphers = props.sslCipherSuites.split(',');\n      const trimmed = ciphers.map(cipher => cipher.trim());\n      options['ciphers'] = trimmed.join(':');\n    } else {\n      options['ciphers'] = props.sslCipherSuites;\n    }\n\n    options['rejectUnauthorized'] = props.sslValidateCertificate;\n\n    // only set checkServerIdentity callback if rejectUnauthorized\n    if (options['rejectUnauthorized'] && Array.isArray(props.sslTrustedCommonNameList)) {\n      options['checkServerIdentity'] = this.checkCertificateCNs.bind(this);\n    }\n\n    // only set trust stores and and checkServerIdentity callback\n    // if rejectUnauthorized is true or authClientCert\n    if ((options['rejectUnauthorized'] || useClientCert) &&\n      props.sslTrustStores && props.sslTrustStores.length) {\n      const tsContents = [];\n      props.sslTrustStores.forEach((tsFile) => {\n        try {\n          tsContents.push(fs.readFileSync(tsFile));\n        } catch (e) {\n          LOG_WARN(`Failed to load trust store ${tsFile}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load trust store ${tsFile}`,\n            ErrorSubcode.FAILED_LOADING_TRUSTSTORE,\n            e);\n        }\n      });\n      options['ca'] = tsContents;\n    }\n\n\n    if (useClientCert) {\n      if (props.sslPfx) {\n        try {\n          options['pfx'] = fs.readFileSync(props.sslPfx);\n          options['passphrase'] = props.sslPfxPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load pfx file ${props.sslPfx}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load pfx ${props.sslPfx}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslPrivateKey) {\n        try {\n          options['key'] = fs.readFileSync(props.sslPrivateKey);\n          options['passphrase'] = props.sslPrivateKeyPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load private key ${props.sslPrivateKey}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load private key ${props.sslPrivateKey}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslCertificate) {\n        try {\n          options['cert'] = fs.readFileSync(props.sslCertificate);\n        } catch (e) {\n          LOG_WARN(`Failed to load certificate file ${props.sslCertificate}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load certificate ${props.sslCertificate}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n    }\n    //SNI\n    const hostname = parseURL(this._url).hostname;\n    options['servername'] = hostname;\n    return options;\n    /* eslint-enable dot-notation */\n  }\n\n}\n\nmodule.exports.NodeTLSOptsMixin = NodeTLSOptsMixin;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  if (typeof navigator !== 'undefined') {\n      /* eslint-env browser */\n    if (navigator.appVersion.indexOf('MSIE 9.') !== -1 ||\n        navigator.appVersion.indexOf('Trident/') !== -1) {\n        // Avoid the buffer-based version for IE9, 10, and 11, but not Edge.\n      return require('./buffer-smf-client').BufferSMFClient;\n    }\n  }\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { CompressedTransport } = require('./transport-compression');\nconst { TcpRawTransport } = require('./transport-tcp-plaintext');\nconst { TcpTlsTransport } = require('./transport-tcp-tls');\nconst { TlsOnlyTransport } = require('./transport-tls');\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\nmodule.exports.CompressedTransport = CompressedTransport;\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const { Duplex } = require('stream');\nconst { LOG_WARN, LOG_TRACE } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\n\n/**\n * This is a Duplex Stream encapsulating a Transport.\n * It transparently passes reads, writes, and events until \"shunted\".\n * After that, nothing gets through.\n *\n * The intermediate \"dontEnd\" state allows a TLS shutdown to run its course\n * without closing the underlying transport in the end.\n *\n * Intended lifecycle:\n *\n * 1, create underlying transport\n * 2, create ShuntableTransport with underlying transport\n * 3, pass shuntableTransport to tls.connect\n * 4, connect underlying transport\n *\n * <traffic may flow until TLS shutdown desired>\n *\n * 1, shuntableTransport.dontend();\n * 2, tlsSocket.end();\n * 3, on 'closed' event: take and start using shuntableSocket.socket.\n *\n * For an explanation of _read and _write see\n * https://nodejs.org/api/stream.html#stream_implementing_a_duplex_stream\n *\n * @private\n */\n\nclass ShuntableTransport extends Duplex {\n  constructor(options) {\n    super(options);\n    this._shunted = false;\n    this._dontEnd = false;\n    this._underlyingTransport = options.underlyingTransport;\n    // Buffers data-callback pairs until connected or underlying transport decongests.\n    // Should never have more than 1 item as long as the stream contract is upheld.\n    this._interimBuffer = [];\n    this._transportDrained = true;\n    this._connected = false;\n  }\n\n  shunt() {\n    this._shunted = true;\n  }\n\n  dontEnd() {\n    this._dontEnd = true;\n  }\n\n  _write(chunk, encoding, callback) {\n    if (!this._shunted) {\n      if (!this._transportDrained || !this._connected) {\n        this._interimBuffer.push([chunk, callback]);\n        return;\n      }\n      const rc = this._underlyingTransport.send(chunk);\n      switch (rc) {\n        case TransportReturnCode.OK:\n          this._transportDrained = true;\n          callback();\n          break;\n        case TransportReturnCode.NO_SPACE:\n          this._transportDrained = false;\n          this._interimBuffer.push([chunk, callback]);\n          break;\n        case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n          this.emit('error',\n                    'Underlying transport in invalid state for send.');\n          break;\n        default:\n          LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n      }\n    }\n  }\n\n  //_read(size) {\n  _read() {\n    if (!this._shunted) {\n      this._underlyingTransport.unpause();\n    }\n  }\n\n  rxDataBuffer(data) {\n    if (!this._shunted) {\n      const noPause = this.push(data);\n      if (!noPause) {\n        this._underlyingTransport.pause();\n      }\n    }\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onConnect();\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain();\n        break;\n      default:\n        LOG_WARN(`TLS layer got unkown event code ${transportEvent.getTransportEventCode}`);\n    }\n  }\n  onError(transportEvent) {\n    if (!this._shunted) {\n      this.emit('error', transportEvent.getInfoStr());\n    }\n  }\n\n  onClose(transportEvent) {\n    this._connected = false;\n    if (!this._shunted) {\n      LOG_TRACE(`ShuntableTransport emits close for transport event ${transportEvent}`);\n      this.emit('close');\n    }\n  }\n\n  onDrain() {\n    if (!this._shunted) {\n      this._transportDrained = true;\n      if (this._interimBuffer && this._interimBuffer.length > 0) {\n        const resendBuffer = this._interimBuffer;\n        this._interimBuffer = [];\n        resendBuffer.forEach(([data, callback]) => this._write(data, null, callback));\n      }\n      if (!this._transportDrained) {\n        return;\n      }\n      this.emit('drain');\n    }\n  }\n\n  onConnect() {\n    this._connected = true;\n    if (!this._shunted) {\n      this.onDrain(); // flush interimbuffer.\n      this.emit('connect');\n    }\n  }\n\n  end(chunk, encoding, callback) {\n    if (!this._shunted && !this._dontEnd) {\n      if (typeof chunk === 'function') { // sometimes TLS calls end() wrong...\n        this._underlyingTransport.destroy('End from TLS');\n        chunk();\n      } else {\n        const cb = () => { this._underlyingTransport.destroy('End from TLS'); callback(); };\n        this._write(chunk, encoding, cb);\n      }\n    } else if (!this._shunted) {\n      if (typeof chunk !== 'function') { // sometimes TLS calls end() wrong...\n        this._write(chunk, encoding, callback);\n      } else {\n        chunk();\n      }\n    }\n  }\n\n  destroy(error) {\n    if (!this._shunted && !this._dontEnd) {\n      this._underlyingTransport.destroy(error);\n    }\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (!this._shunted && !this._dontEnd && this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n  }\n\n  setNoDelay(arg) {\n    if (!this.shunted) {\n      LOG_TRACE(`Ignoring setNoDelay(${arg})`);\n    }\n  }\n}\n\nmodule.exports.ShuntableTransport = ShuntableTransport;\n","const zlib = require('zlib');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_INFO, LOG_WARN } = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Modular transport layer performing zlib compression.\n * Requires an underlying transport, can be plaintext or TLS, connected or not.\n * Uses the nodejs zlib module which in turn uses the libuv threadpool in nodejs.\n * The end user may need to increase threadpool size.\n * https://nodejs.org/api/zlib.html#zlib_threadpool_usage\n *\n * @private\n */\nclass CompressedTransport extends TransportBase {\n\n  constructor(eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super('tcp://x', eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._waitForSocketDrain = false;\n    this._waitForCompressorDrain = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._socketDrained = true;\n    this._compressorDrained = true;\n    this._interimBuffer = [];\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n\n    this._compressor = null;\n    this._decompressor = null;\n\n    this._compressionLevel = props.compressionLevel;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  // Underlying transport callback.\n  rxDataBuffer(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportCompressedSession stray rxDataBuffer, ignoring.');\n      return;\n    }\n    this._decompressor.write(data);\n    this._decompressor.flush();\n  }\n\n  /**\n   * Decompressor callback.\n   * @private\n   * @param {Buffer} data the data\n   */\n  onData(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportSession stray onData, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Underlying transport callback for SEND_ERROR\n   * @private\n   * @param {TransportSessionEvent} transportEvent the error\n   */\n  onError(transportEvent) {\n    // Need new state for \"waiting for decompressor flush after error\"?\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    const onErrorStage2 = () => {\n      if (this._eventCB) {\n        LOG_TRACE('Decompressor flush returned, passing error to eventCB.');\n        this._eventCB(transportEvent);\n      } else {\n        LOG_TRACE('Decompressor flush returned, but eventCB already cleared.');\n      }\n    };\n\n    LOG_TRACE('Flushing decompressor on socket error.');\n    this._decompressor.flush(zlib.Z_SYNC_FLUSH, onErrorStage2);\n  }\n\n  /**\n   * Treat any zlib error the same as a socket error,\n   * plus close the socket.\n   * @private\n   * @param {Error} error the error\n   */\n  onZlibError(error) {\n    this._socketError = error;\n    this._underlyingTransport.destroy(`Connection closed by zlib error. Message:${error}`,\n                                      ErrorSubcode.COMMUNICATION_ERROR);\n  }\n  /**\n   * underlying transport callback for DESTROYED_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onClose(transportEvent) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      this._destroy(transportEvent);\n    } else {\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      LOG_TRACE('Flushing decompressor on socket close.');\n      const stage2destroy = () => this._destroy(transportEvent);\n      this._decompressor.flush(zlib.Z_SYNC_FLUSH, stage2destroy);\n    }\n  }\n\n  /**\n   * underlying transport callback for UP_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onOpen(transportEvent) {\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_INFO(`compressor stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(transportEvent);\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    LOG_TRACE('Initializing compressed transport');\n    let rc = TransportReturnCode.OK;\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    if (this._underlyingTransport._state === TransportSessionState.DOWN) {\n      rc = this._underlyingTransport.connect();\n    } else {\n      this._state = TransportSessionState.SESSION_UP;\n    }\n    try {\n      // initialize compressor, decompressor.\n      const options = {\n        highWaterMark: this._sendBufferMaxSize,\n        level:         this._compressionLevel,\n        flush:         zlib.Z_SYNC_FLUSH,\n      };\n      this._compressor =\n        zlib.createDeflateRaw(options);\n      this._decompressor = zlib.createInflateRaw({ flush: zlib.Z_SYNC_FLUSH });\n\n      this._decompressor.on('data', this.onData.bind(this));\n      this._decompressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('data', this.sendCompressed.bind(this));\n      this._compressor.on('drain', this.onCompressorDrain.bind(this));\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp zlib layer: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return rc;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * We'll clean up zlib objects on the DESTROYED_NOTICE.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n    return this._underlyingTransport.destroy(msg, subcode);\n  }\n\n  // second stage of the underlying transport callback for DESTROYED_NOTICE.\n  // We should only ever get here once the underlying transport is destroyed.\n  // See onClose.\n  _destroy(transportEvent) {\n    if (this._state !== TransportSessionState.DOWN) {\n      this._state = TransportSessionState.DOWN;\n      const onerrorStub = function onerrorStub() { };\n      this._waitForSocketDrain = false;\n      this._flushCallback = null;\n      this._socketDrained = true;\n      this._client = null; // Don't accept data.\n      this._compressor.removeAllListeners();\n      this._compressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._decompressor.removeAllListeners();\n      this._decompressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._compressor.unpipe();\n      //https://github.com/nodejs/node/issues/15625\n      this._compressor._hadError = true;\n      this._compressor.close();\n      this._compressor = null;\n      this._decompressor.close();\n      this._decompressor = null;\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      this._eventCB(transportEvent);\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n    return TransportReturnCode.OK;\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onOpen(transportEvent);\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain(transportEvent);\n        break;\n      default:\n        LOG_WARN('Compressing transport layer got unkown event code ' +\n          `${transportEvent.getTransportEventCode}`);\n    }\n  }\n\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    const flushStage2 = () => this._underlyingTransport.flush(callback);\n    this._compressor.flush(flushStage2);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      // On a lower layer socket error this transport is in WAITING_FOR_DESTROY state\n      // until the decompressor flushes.\n      // We could respond with NO_SPACE, but we'd have to send a CAN_SEND on reconnect.\n      LOG_INFO(`Compressing transport can't send in state ${this._state}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Congestion control.\n    // We try to avoid pumping too much data into the compressor until the socket drains.\n    // We pause()/resume() the compressor while the socket is congested, but still.\n    if (forceAllowEnqueue\n      || (this._socketDrained && this._compressorDrained)) {\n      if (this._interimBuffer.length > 0) {\n        LOG_WARN(`Allowing send when interimBuffer is ${this._interimBuffer.length}`);\n      }\n      this._compressorDrained = this._compressor.write(message, 'ascii');\n      this._compressor.flush();\n      this._clientstats.bytesWritten += message.length;\n      ++this._clientstats.msgWritten;\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    if (!this._socketDrained) {\n      this._waitForSocketDrain = true;\n    }\n    if (!this._compressorDrained) {\n      this._waitForCompressorDrain = true;\n    }\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  sendCompressed(data) {\n    if (!this._socketDrained) {\n      this._interimBuffer.push(data);\n      this._compressor.pause();\n      return;\n    }\n    const rc = this._underlyingTransport.send(data);\n    switch (rc) {\n      case TransportReturnCode.OK:\n        this._socketDrained = true;\n        break;\n      case TransportReturnCode.NO_SPACE:\n        this._socketDrained = false;\n        this._interimBuffer.push(data);\n        this._compressor.pause();\n        break;\n      case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n        this.onError(new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            'Underlying transport in invalid state for send.',\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n        break;\n      default:\n        LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n    }\n  }\n\n  /**\n   * Underlying transport callback for CAN_SEND.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   */\n  onDrain() {\n    this._socketDrained = true;\n    if (this._interimBuffer && this._interimBuffer.length > 0) {\n      const resendBuffer = this._interimBuffer;\n      this._interimBuffer = [];\n      resendBuffer.forEach(data => this.sendCompressed(data));\n    }\n    if (!this._socketDrained) {\n      return;\n    }\n    this._compressor.resume();\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._waitForSocketDrain) {\n      this._waitForSocketDrain = false;\n      if (!this._waitForCompressorDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  onCompressorDrain() {\n    this._compressorDrained = true;\n    if (this._waitForCompressorDrain) {\n      this._waitForCompressorDrain = false;\n      if (!this._waitForSocketDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    this._underlyingTransport.pause();\n    this._decompressor.pause();\n  }\n\n  unpause() {\n    this._underlyingTransport.unpause();\n    this._decompressor.resume();\n  }\n\n}\n\nmodule.exports.CompressedTransport = CompressedTransport;\n","const net = require('net');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Tcp (tcps://) transport without TLS (tcps://) support.\n * Only works in node.js.\n * @private\n */\nclass TcpRawTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._rawSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._props._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('Plaintext transport received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('Plaintext transport stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.on('connect', this.onOpen.bind(this, this._rawSocket));\n      // Only connect after the connect listener is registered:\n      this._rawSocket.connect(port, host);\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._rawSocket.on('data', this.onData.bind(this, this._rawSocket));\n      this._rawSocket.on('error', this.onError.bind(this, this._rawSocket));\n      this._rawSocket.on('close', this.onClose.bind(this, this._rawSocket));\n      this._rawSocket.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._rawSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._rawSocket) {\n        this._rawSocket.removeAllListeners();\n        this._rawSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._rawSocket.destroy();\n        this._rawSocket.destroy();\n        this._rawSocket = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket) {\n        this._rawSocket.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      LOG_ERROR('plaintext: INVALID_STATE_FOR_OPERATION');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < (this._sendBufferMaxSize - this._rawSocket.bufferSize)) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._rawSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    if (this._rawSocket) {\n      this._rawSocket.pause();\n    }\n  }\n\n  unpause() {\n    if (this._rawSocket) {\n      this._rawSocket.resume();\n    }\n  }\n\n}\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\n","const net = require('net');\nconst tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Tcp (smf) transport with TLS (tcps://) support.\n * Only works in node.js.\n * Modelled after the WebSocket transport mostly,\n * except there is no downgrade mechanism.\n * There is no separate \"Transport\" class\n * to manage the downgrade FSM:\n * The TransportSession is the Transport.\n\n * @private\n */\nclass TcpTlsTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    //this._socket = null;\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._tlsSocket = null;\n    // Always the socket to write to.\n    // could be _rawsocket, _tlsSocket, or _compressor.\n    this._writable = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(newValue) {\n    this._clientstats = newValue;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TcpTransportSession received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.connect(port, host);\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._rawSocket;\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._rawSocket));\n      this._writable = this._tlsSocket;\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._writable.on('data', this.onData.bind(this, this._rawSocket));\n      this._writable.on('error', this.onError.bind(this, this._rawSocket));\n      this._writable.on('close', this.onClose.bind(this, this._rawSocket));\n      this._writable.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._writable.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._writable) {\n        this._writable.removeAllListeners();\n        this._writable.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._writable.destroy();\n        this._writable.destroy();\n        this._rawSocket = null;\n        this._writable = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket && !this._tlsSocket){\n        this._rawSocket.destroy(new Error(errorMsg));\n      } else if (this._writable) {\n        // destroy the writable which should be the _tlsSocket\n        this._writable.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._writable.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._writable.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n}\n\nmixin(TcpTlsTransport, NodeTLSOptsMixin);\n\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { ShuntableTransport } = require('./shuntable-transport');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Modular transport with TLS (tcps://) support.\n * Only works in node.js.\n * Must be initialized with an underlying transport\n * (currently only the plaintext tcp transport is supported).\n * Wraps the underlying transport in a ShuntableTransport stream\n * which can be passed to tls.connect()\n * Supports  TLS shutdown leaving the socket open.\n * @private\n */\nclass TlsOnlyTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    this._tlsSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  getUnderlyingTransport() {\n    return this._underlyingTransport;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  // eventCB and rxDataBuffer forwarded to _shuntableTransport\n  // Chicken-egg problem in the factory...\n  eventCB(transportEvent) {\n    this._shuntableTransport.eventCB(transportEvent);\n  }\n\n  rxDataBuffer(data) {\n    this._shuntableTransport.rxDataBuffer(data);\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('Tls transport stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tls transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      this._eventCB(\n        new TransportSessionEvent(\n          TransportSessionEventCode.SEND_ERROR,\n          `Connection error${error}`,\n          null,\n          ErrorSubcode.CONNECTION_ERROR, null));\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tls transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._tlsSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TlsTransportSession received socket open event.');\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TlsTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._tlsSocket) {\n      LOG_ERROR('TCP transport can not connect once _tlsSocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    LOG_DEBUG('Establishing TLS transport session');\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    try {\n      const duplexOptions = { underlyingTransport: this._underlyingTransport };\n      this._shuntableTransport = new ShuntableTransport(duplexOptions);\n      this._underlyingTransport.connect();\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._shuntableTransport;\n      // host and port can be set here for certificate validation in the future.\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._tlsSocket));\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._tlsSocket.on('data', this.onData.bind(this, this._tlsSocket));\n      this._tlsSocket.on('error', this.onError.bind(this, this._tlsSocket));\n      this._tlsSocket.on('close', this.onClose.bind(this, this._tlsSocket));\n      this._tlsSocket.on('drain', this.onDrain.bind(this, this._tlsSocket));\n      this._tlsSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create TLS socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('TLS transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    //return this._underlyingTransport.destroy(msg, subcode);\n    return this._destroy(this._tlsSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tls transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._tlsSocket) {\n        this._tlsSocket.removeAllListeners();\n        this._tlsSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._tlsSocket.destroy();\n        this._tlsSocket.destroy();\n        this._tlsSocket = null;\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.destroy(msg, subcode);\n        this._underlyingTransport = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._tlsSocket) {\n        this._tlsSocket.destroy(new Error(errorMsg));\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.forceFailure(errorMsg);\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._tlsSocket.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._tlsSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  tlsShutdown(callback) {\n    this._tlsSocket.removeAllListeners('close');\n    this._tlsSocket.on('close', this.tlsShutdownStage2.bind(this, callback));\n    this._shuntableTransport.dontEnd();\n    this._tlsSocket.end();\n  }\n\n  tlsShutdownStage2(callback) {\n    this._shuntableTransport.shunt();\n    this._tlsSocket.removeAllListeners();\n    this._tlsSocket = null;\n    this._shuntableTransport = null;\n    this._underlyingTransport.rehome(this._eventCB, this._client);\n    this._underlyingTransport.setClientStats(this.getClientStats());\n    this.setClientStats(null);\n    this._eventCB = null;\n    this._client = null;\n    callback(this._underlyingTransport);\n  }\n}\n\nmixin(TlsOnlyTransport, NodeTLSOptsMixin);\n\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\n\nmodule.exports = {\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('clone');\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","'use strict';\n\nconst WebSocket = require('./lib/websocket');\n\nWebSocket.createWebSocketStream = require('./lib/stream');\nWebSocket.Server = require('./lib/websocket-server');\nWebSocket.Receiver = require('./lib/receiver');\nWebSocket.Sender = require('./lib/sender');\n\nWebSocket.WebSocket = WebSocket;\nWebSocket.WebSocketServer = WebSocket.Server;\n\nmodule.exports = WebSocket;\n","'use strict';\n\nconst { EMPTY_BUFFER } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) {\n    return new FastBuffer(target.buffer, target.byteOffset, offset);\n  }\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.length === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = new FastBuffer(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\nmodule.exports = {\n  concat,\n  mask: _mask,\n  toArrayBuffer,\n  toBuffer,\n  unmask: _unmask\n};\n\n/* istanbul ignore else  */\nif (!process.env.WS_NO_BUFFER_UTIL) {\n  try {\n    const bufferUtil = require('bufferutil');\n\n    module.exports.mask = function (source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    };\n\n    module.exports.unmask = function (buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","'use strict';\n\nmodule.exports = {\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\n  EMPTY_BUFFER: Buffer.alloc(0),\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n  kListener: Symbol('kListener'),\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  NOOP: () => {}\n};\n","'use strict';\n\nconst { kForOnEventAttribute, kListener } = require('./constants');\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {(Function|Object)} handler The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, handler, options = {}) {\n    for (const listener of this.listeners(type)) {\n      if (\n        !options[kForOnEventAttribute] &&\n        listener[kListener] === handler &&\n        !listener[kForOnEventAttribute]\n      ) {\n        return;\n      }\n    }\n\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = handler;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {(Function|Object)} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n\n/**\n * Call an event listener\n *\n * @param {(Function|Object)} listener The listener to call\n * @param {*} thisArg The value to use as `this`` when calling the listener\n * @param {Event} event The event to pass to the listener\n * @private\n */\nfunction callListener(listener, thisArg, event) {\n  if (typeof listener === 'object' && listener.handleEvent) {\n    listener.handleEvent.call(listener, event);\n  } else {\n    listener.call(thisArg, event);\n  }\n}\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let code = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (\n        i !== 0 &&\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n      ) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n","'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n","'use strict';\n\nconst zlib = require('zlib');\n\nconst bufferUtil = require('./buffer-util');\nconst Limiter = require('./limiter');\nconst { kStatusCode } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) {\n        data = new FastBuffer(data.buffer, data.byteOffset, data.length - 4);\n      }\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n","'use strict';\n\nconst { Writable } = require('stream');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = require('./constants');\nconst { concat, toArrayBuffer, unmask } = require('./buffer-util');\nconst { isValidStatusCode, isValidUTF8 } = require('./validation');\n\nconst FastBuffer = Buffer[Symbol.species];\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */\n  constructor(options = {}) {\n    super();\n\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\n    this._extensions = options.extensions || {};\n    this._isServer = !!options.isServer;\n    this._maxPayload = options.maxPayload | 0;\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\n    this[kWebSocket] = undefined;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._state = GET_INFO;\n    this._loop = false;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = new FastBuffer(\n        buf.buffer,\n        buf.byteOffset + n,\n        buf.length - n\n      );\n\n      return new FastBuffer(buf.buffer, buf.byteOffset, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = new FastBuffer(\n          buf.buffer,\n          buf.byteOffset + n,\n          buf.length - n\n        );\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    let err;\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          err = this.getInfo();\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          err = this.getPayloadLength16();\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          err = this.getPayloadLength64();\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          err = this.getData(cb);\n          break;\n        default:\n          // `INFLATING`\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    cb(err);\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getInfo() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (!this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n      }\n\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (\n        this._payloadLength > 0x7d ||\n        (this._opcode === 0x08 && this._payloadLength === 1)\n      ) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      }\n    } else {\n      this._loop = false;\n      return error(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n      }\n    } else if (this._masked) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength16() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength64() {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    return this.haveLength();\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  haveLength() {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n\n      if (\n        this._masked &&\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\n      ) {\n        unmask(data, this._mask);\n      }\n    }\n\n    if (this._opcode > 0x07) return this.controlMessage(data);\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its length is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    return this.dataMessage();\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          return cb(\n            error(\n              RangeError,\n              'Max payload size exceeded',\n              false,\n              1009,\n              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n            )\n          );\n        }\n\n        this._fragments.push(buf);\n      }\n\n      const er = this.dataMessage();\n      if (er) return cb(er);\n\n      this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */\n  dataMessage() {\n    if (this._fin) {\n      const messageLength = this._messageLength;\n      const fragments = this._fragments;\n\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragmented = 0;\n      this._fragments = [];\n\n      if (this._opcode === 2) {\n        let data;\n\n        if (this._binaryType === 'nodebuffer') {\n          data = concat(fragments, messageLength);\n        } else if (this._binaryType === 'arraybuffer') {\n          data = toArrayBuffer(concat(fragments, messageLength));\n        } else {\n          data = fragments;\n        }\n\n        this.emit('message', data, true);\n      } else {\n        const buf = concat(fragments, messageLength);\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          this._loop = false;\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('message', buf, false);\n      }\n    }\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data) {\n    if (this._opcode === 0x08) {\n      this._loop = false;\n\n      if (data.length === 0) {\n        this.emit('conclude', 1005, EMPTY_BUFFER);\n        this.end();\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          return error(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n        }\n\n        const buf = new FastBuffer(\n          data.buffer,\n          data.byteOffset + 2,\n          data.length - 2\n        );\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('conclude', code, buf);\n        this.end();\n      }\n    } else if (this._opcode === 0x09) {\n      this.emit('ping', data);\n    } else {\n      this.emit('pong', data);\n    }\n\n    this._state = GET_INFO;\n  }\n}\n\nmodule.exports = Receiver;\n\n/**\n * Builds an error object.\n *\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @param {String} errorCode The exposed error code\n * @return {(Error|RangeError)} The error\n * @private\n */\nfunction error(ErrorCtor, message, prefix, statusCode, errorCode) {\n  const err = new ErrorCtor(\n    prefix ? `Invalid WebSocket frame: ${message}` : message\n  );\n\n  Error.captureStackTrace(err, error);\n  err.code = errorCode;\n  err[kStatusCode] = statusCode;\n  return err;\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */\n\n'use strict';\n\nconst net = require('net');\nconst tls = require('tls');\nconst { randomFillSync } = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst { EMPTY_BUFFER } = require('./constants');\nconst { isValidStatusCode } = require('./validation');\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\n\nconst kByteLength = Symbol('kByteLength');\nconst maskBuffer = Buffer.alloc(4);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */\n  constructor(socket, extensions, generateMask) {\n    this._extensions = extensions || {};\n\n    if (generateMask) {\n      this._generateMask = generateMask;\n      this._maskBuffer = Buffer.alloc(4);\n    }\n\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {(Buffer|String)} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {(Buffer|String)[]} The framed data\n   * @public\n   */\n  static frame(data, options) {\n    let mask;\n    let merge = false;\n    let offset = 2;\n    let skipMasking = false;\n\n    if (options.mask) {\n      mask = options.maskBuffer || maskBuffer;\n\n      if (options.generateMask) {\n        options.generateMask(mask);\n      } else {\n        randomFillSync(mask, 0, 4);\n      }\n\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n      offset = 6;\n    }\n\n    let dataLength;\n\n    if (typeof data === 'string') {\n      if (\n        (!options.mask || skipMasking) &&\n        options[kByteLength] !== undefined\n      ) {\n        dataLength = options[kByteLength];\n      } else {\n        data = Buffer.from(data);\n        dataLength = data.length;\n      }\n    } else {\n      dataLength = data.length;\n      merge = options.mask && options.readOnly && !skipMasking;\n    }\n\n    let payloadLength = dataLength;\n\n    if (dataLength >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (dataLength > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(dataLength, 2);\n    } else if (payloadLength === 127) {\n      target[2] = target[3] = 0;\n      target.writeUIntBE(dataLength, 4, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (skipMasking) return [target, data];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, dataLength);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, dataLength);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    const options = {\n      [kByteLength]: buf.length,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x08,\n      readOnly: false,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, buf, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(buf, options), cb);\n    }\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x09,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x0a,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = byteLength >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        [kByteLength]: byteLength,\n        fin: options.fin,\n        generateMask: this._generateMask,\n        mask: options.mask,\n        maskBuffer: this._maskBuffer,\n        opcode,\n        readOnly,\n        rsv1\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n      } else {\n        this.dispatch(data, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(\n        Sender.frame(data, {\n          [kByteLength]: byteLength,\n          fin: options.fin,\n          generateMask: this._generateMask,\n          mask: options.mask,\n          maskBuffer: this._maskBuffer,\n          opcode,\n          readOnly,\n          rsv1: false\n        }),\n        cb\n      );\n    }\n  }\n\n  /**\n   * Dispatches a message.\n   *\n   * @param {(Buffer|String)} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += options[kByteLength];\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        if (typeof cb === 'function') cb(err);\n\n        for (let i = 0; i < this._queue.length; i++) {\n          const params = this._queue[i];\n          const callback = params[params.length - 1];\n\n          if (typeof callback === 'function') callback(err);\n        }\n\n        return;\n      }\n\n      this._bufferedBytes -= options[kByteLength];\n      this._deflating = false;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[3][kByteLength];\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[3][kByteLength];\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n","'use strict';\n\nconst { Duplex } = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n","'use strict';\n\nconst { isUtf8 } = require('buffer');\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  isValidStatusCode,\n  isValidUTF8: _isValidUTF8,\n  tokenChars\n};\n\nif (isUtf8) {\n  module.exports.isValidUTF8 = function (buf) {\n    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\n  };\n} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {\n  try {\n    const isValidUTF8 = require('utf-8-validate');\n\n    module.exports.isValidUTF8 = function (buf) {\n      return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst http = require('http');\nconst https = require('https');\nconst net = require('net');\nconst tls = require('tls');\nconst { createHash } = require('crypto');\n\nconst extension = require('./extension');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst subprotocol = require('./subprotocol');\nconst WebSocket = require('./websocket');\nconst { GUID, kWebSocket } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      WebSocket,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key = req.headers['sec-websocket-key'];\n    const version = +req.headers['sec-websocket-version'];\n\n    if (req.method !== 'GET') {\n      const message = 'Invalid HTTP method';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\n      return;\n    }\n\n    if (req.headers.upgrade.toLowerCase() !== 'websocket') {\n      const message = 'Invalid Upgrade header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (!key || !keyRegex.test(key)) {\n      const message = 'Missing or invalid Sec-WebSocket-Key header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (version !== 8 && version !== 13) {\n      const message = 'Missing or invalid Sec-WebSocket-Version header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (!this.shouldHandle(req)) {\n      abortHandshake(socket, 400);\n      return;\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Protocol header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        const message =\n          'Invalid or unacceptable Sec-WebSocket-Extensions header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new this.options.WebSocket(null);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  //\n  // The socket is writable unless the user destroyed or ended it before calling\n  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\n  // error. Handling this does not make much sense as the worst that can happen\n  // is that some of the data written by the user might be discarded due to the\n  // call to `socket.end()` below, which triggers an `'error'` event that in\n  // turn causes the socket to be destroyed.\n  //\n  message = message || http.STATUS_CODES[code];\n  headers = {\n    Connection: 'close',\n    'Content-Type': 'text/html',\n    'Content-Length': Buffer.byteLength(message),\n    ...headers\n  };\n\n  socket.once('finish', socket.destroy);\n\n  socket.end(\n    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      Object.keys(headers)\n        .map((h) => `${h}: ${headers[h]}`)\n        .join('\\r\\n') +\n      '\\r\\n\\r\\n' +\n      message\n  );\n}\n\n/**\n * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\n * one listener for it, otherwise call `abortHandshake()`.\n *\n * @param {WebSocketServer} server The WebSocket server\n * @param {http.IncomingMessage} req The request object\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} message The HTTP response body\n * @private\n */\nfunction abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\n  if (server.listenerCount('wsClientError')) {\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\n\n    server.emit('wsClientError', err, socket, req);\n  } else {\n    abortHandshake(socket, code, message);\n  }\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst { randomBytes, createHash } = require('crypto');\nconst { Readable } = require('stream');\nconst { URL } = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = require('./event-target');\nconst { format, parse } = require('./extension');\nconst { toBuffer } = require('./buffer-util');\n\nconst closeTimeout = 30 * 1000;\nconst kAborted = Symbol('kAborted');\nconst protocolVersions = [8, 13];\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._extensions = {};\n    this._paused = false;\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get isPaused() {\n    return this._paused;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    this._sender = new Sender(socket, this._extensions, options.generateMask);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Pause the socket.\n   *\n   * @public\n   */\n  pause() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = true;\n    this._socket.pause();\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Resume the socket.\n   *\n   * @public\n   */\n  resume() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = false;\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'isPaused',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: 'GET',\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket._url = address.href;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n\n    websocket._url = address;\n  }\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isIpcUrl = parsedUrl.protocol === 'ws+unix:';\n  let invalidUrlMessage;\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {\n    invalidUrlMessage =\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", or \"ws+unix:\"';\n  } else if (isIpcUrl && !parsedUrl.pathname) {\n    invalidUrlMessage = \"The URL's pathname is empty\";\n  } else if (parsedUrl.hash) {\n    invalidUrlMessage = 'The URL contains a fragment identifier';\n  }\n\n  if (invalidUrlMessage) {\n    const err = new SyntaxError(invalidUrlMessage);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const request = isSecure ? https.request : http.request;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket'\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isIpcUrl) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req;\n\n  if (opts.followRedirects) {\n    if (websocket._redirects === 0) {\n      websocket._originalIpc = isIpcUrl;\n      websocket._originalSecure = isSecure;\n      websocket._originalHostOrSocketPath = isIpcUrl\n        ? opts.socketPath\n        : parsedUrl.host;\n\n      const headers = options && options.headers;\n\n      //\n      // Shallow copy the user provided options so that headers can be changed\n      // without mutating the original object.\n      //\n      options = { ...options, headers: {} };\n\n      if (headers) {\n        for (const [key, value] of Object.entries(headers)) {\n          options.headers[key.toLowerCase()] = value;\n        }\n      }\n    } else if (websocket.listenerCount('redirect') === 0) {\n      const isSameHost = isIpcUrl\n        ? websocket._originalIpc\n          ? opts.socketPath === websocket._originalHostOrSocketPath\n          : false\n        : websocket._originalIpc\n        ? false\n        : parsedUrl.host === websocket._originalHostOrSocketPath;\n\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\n        //\n        // Match curl 7.77.0 behavior and drop the following headers. These\n        // headers are also dropped when following a redirect to a subdomain.\n        //\n        delete opts.headers.authorization;\n        delete opts.headers.cookie;\n\n        if (!isSameHost) delete opts.headers.host;\n\n        opts.auth = undefined;\n      }\n    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n\n    req = websocket._req = request(opts);\n\n    if (websocket._redirects) {\n      //\n      // Unlike what is done for the `'upgrade'` event, no early exit is\n      // triggered here if the user calls `websocket.close()` or\n      // `websocket.terminate()` from a listener of the `'redirect'` event. This\n      // is because the user can also call `request.destroy()` with an error\n      // before calling `websocket.close()` or `websocket.terminate()` and this\n      // would result in an error being emitted on the `request` object with no\n      // `'error'` event listeners attached.\n      //\n      websocket.emit('redirect', websocket.url, req);\n    }\n  } else {\n    req = websocket._req = request(opts);\n  }\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req[kAborted]) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (e) {\n        const err = new SyntaxError(`Invalid URL: ${location}`);\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the\n    // `'upgrade'` event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    if (res.headers.upgrade.toLowerCase() !== 'websocket') {\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\n      return;\n    }\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      generateMask: opts.generateMask,\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n\n  if (opts.finishRequest) {\n    opts.finishRequest(req, websocket);\n  } else {\n    req.end();\n  }\n}\n\n/**\n * Emit the `'error'` and `'close'` events.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream[kAborted] = true;\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    process.nextTick(emitErrorAndClose, websocket, err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    process.nextTick(cb, err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  const websocket = this[kWebSocket];\n\n  if (!websocket.isPaused) websocket._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  websocket.emit('error', err);\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n","module.exports = require(\"bufferutil\");","module.exports = require(\"utf-8-validate\");","module.exports = require(\"buffer\");","module.exports = require(\"constants\");","module.exports = require(\"crypto\");","module.exports = require(\"dns\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"stream\");","module.exports = require(\"tls\");","module.exports = require(\"url\");","module.exports = require(\"zlib\");","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n"],"names":["module","exports","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","let","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBuffer","Buffer","hasBlob","Blob","BufferEncoder","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","shiftedVal","data","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","UNSIGNED_LSHIFT_24","ARRAY_BUFFER_CONVERT_CHUNK","stringToUint8Array","dataLength","arrayBuf","ArrayBuffer","uint8Array","Uint8Array","arrayBufferToString","ab","len","byteLength","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","int8ToStr","int8","int16ToStr","int16","int24ToStr","int24","int32ToStr","int32","int64ToStr","int64","high","low","byteArrayToStr","byteArray","slice","strToByteArray","result","strToHexArray","toHex","c","Array","prototype","map","call","split","strToInt8","strToInt16","strToInt24","strToInt32","strToUInt32","strToUInt64","fromBits","substr","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","_internal","solace","Object","assign","PRINTABLE_LUT","tmp","SPACER","UNPRINTABLE","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","asciiOffset","dataLen","ccode","append","clear","parseSMFStream","Decode","decodeCompoundMessage","Codec","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","isString","topicName","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","TEMPORARY_QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","undefined","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createTemporaryName","vrid","id","generateUUID","describe","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","this","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","encoding","subscriptionParseNoExport","NOEXPORT_PREFIX","NOEXPORT_PREFIX_LEN","index","isNoExport","subscriptionParseShare","SHARE_PREFIX","SHARE_PREFIX_LEN","LEVEL_DELIMETER","LEVEL_DELIMETER_LEN","groupIndex","shareGroup","isShare","indexOf","substring","dispatchTopicIndex","subscriptionStringParse","layers","parseLayers","constOffset","constResult","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","parse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","global","BUILD_ENV","TEST","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","getSubcodeMappingInner","root","respErrorCode","respStr","codeMap","searchKey","toLowerCase","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","REPLAY_TEMPORARY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","_requestEventCode","superObj","requestEventCode","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","setValues","p","key","enumName","instance","matches","filter","enumValues","Set","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","strings","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","traversePath","commonSource","keySource","pathArr","reduce","source","compoundKey","trim","rawPath","path","concat","isSuperset","subset","every","elem","has","inplaceUnion","setA","setB","union","inplaceIntersection","delete","intersection","inplaceDifference","difference","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","buildFilter","emits","emitSet","el","emitArray","DISABLED_ACTIONS","ignore","fail","direct","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","_onFirstDirectListener","firstDirect","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","disableEmitter","cancel","interval","onInterval","timerRef","setInterval","clearInterval","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","Version7Profile","legacyInstance","Version10Profile","v10Instance","Version105Profile","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","_profile","profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","reset","_getInitializeCount","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","disposed","flowId","_session","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","entryPointName","innerState","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","evt","_onEventCompletion","getCurrentState","currentState","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","buildLogForwarder","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","addGlobalFuncs","toUpperCase","formatter","_formatter","genericFunction","targetSelf","newLevel","Binding","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","exists","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evictingIndex","evicting","front","firstIndex","rawIndex","lastIndex","readIndex","callback","updateAckState","updateIndex","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowById","flowReconnecting","flowReconnected","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","RING_BUFFER_SIZE","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","addEventToEmit","activeIndicationEnabled","requestStartDispatch","requestStopDispatch","requestStopDispatchFSM","_addEventToEmit","_requestStartDispatch","_requestStopDispatch","emitBindFailed","CONNECT_FAILED_ERROR","emitRebindFailed","verifyEndpointSubscription","destination","isCapable","SHARED_SUBSCRIPTIONS","checkCapabilitiesChoicePoint","MESSAGE_REPLAY","topicEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","handleAccidentalBind","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","connectTimeoutInMsecs","transitionToUnbound","_dispose","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","partitionGroupId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","accessTypeOrDefault","x","EXCLUSIVE","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","getAccessType","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","errorSubcode","respEvent","BIND_SENT","newTimeout","UnbindSent","FlowUp","Reconnecting","reconnectAttempts","RBindSent","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","consumerSuidStr","msgSuidStr","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","_sendAck","_setTransportAckTimer","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","RX_ACKED","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","MAX_CLIENT_ACK_RANGES","bareRanges","range","forceTransportAck","g","setAcked","ackRange","Math","Number","POSITIVE_INFINITY","maxWindowSize","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","getConsumerLocalName","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","success","subCode","respCode","respText","updateQueueSubscription","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","acknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","setLastSent","lastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","publisherId","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","ConnectReason","INIT","RESUME","FAILOVER","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","oldId","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","FAILED","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","fpHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","mdu","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","cos","getUserCos","fpDeliveryMode","mode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","fpXmlMetadata","xmlMetadata","getXmlMetadata","MessageDumpStandardProviderLib","MessageDumpState","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","dumpProviders","provider","isPresent","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isBoolean","isInstanceOfOrNothing","isNumberOrNothing","isStringOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","clearMessage","fields","f","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","MAX_MESSAGE_TTL_MS","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","canAck","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","_binaryMetaChunk","meta","_smfHeader","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","sdtType","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","validFlags","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","ReplayStartType","RMID_VERSION_1_PREFIX","RMID_LEN","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","idBuffer","toBytesBE","hexString","sep","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","maybeAdaptFromDestination","targetType","queueSpec","_durable","NONEXCLUSIVE","valTopicString","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","encodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","int48ToStr","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","encodeStream","C_2_48","pow","strencode","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","parseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","parseFieldHeader","onebyte","elemType","lenBytes","elemLen","elemValLen","ParseFloat","parseFloatField","readFloatBE","readDoubleBE","createField","readUIntBE","parseIntegerField","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","parseMapAt","datalen","mapObj","keyFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseStreamAt","fieldHeader","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","UNBIND_ACK","BR_ERRORID","PQ","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","defaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","generateRandomId","rand","random","toFixed","GlobalContext","sessionCounter","idCounter","RandId","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","dns","dnsLookupPromise","url","Promise","host","hostname","lookup","address","resolved","code","errno","syscall","urls","cb","promises","all","then","catch","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","sessionEventCode","_sessionEventCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","superclassArgsBuilder","SessionFSMEvent","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","SessionFSM","session","stats","logFormatter","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","connectWaitTimeInMsecs","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","newTransport","updateTransportCompression","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","flows","sendConsumerSessionUpEvent","reconnectingFlows","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","match","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","generateMessage","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","SessionPropertiesLib","valArrayIsMember","valArrayOfString","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valSslExcludedProtocols","supported","SUPPORTED_SSL_PROTOCOLS","prtcl","protocol","valSslCipherSuites","string","empty","ciphers","SUPPORTED_CIPHER_SUITES","cipher","valSslTrustedCommonNameList","valUrlList","valArray","included","isHttpTransport","transportProtocol","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","validatePropsSupportedByTransport","nonHttpPropsSet","propNames","matchUrl","regex","arrayLength","currententry","useSsl","SessionPropertiesValidator","webTransportProtocolList","useClientCert","authenticationScheme","equal","idToken","accessToken","WS_BINARY","sslValidateCertificate","sslPfxSet","sslPfx","sslPrivateKeySet","sslPrivateKey","sslCertSet","sslCertificate","allTcp","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","transportCount","NodeSslConstants","makeDefaults","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_tpProtocolInUse","_tpContentType","_publisherProperties","DEFAULT_CIPHER_SUITES","SessionPropertiesNode","_tpProtocol","_transportProtocolList","_tpDowngradeTimeout","_setTransportProtocolInUse","_setWebTransportProtocolInUse","_sslExcludedProtocols","_sslCipherSuites","_sslValidateCert","env","NODE_TLS_REJECT_UNAUTHORIZED","_sslTrustStores","_sslTrustedCNList","_sslPfx","_sslPfxPasswd","_sslPrivateKey","_sslPrivateKeyPasswd","_sslCertificate","_sslProtocol","_compressionLevel","_sslConnectionDowngradeTo","_lendsInspect","sslExcludedProtocols","sslCipherSuites","sslTrustStores","sslTrustedCommonNameList","sslPfxPassword","sslPrivateKeyPassword","sslProtocol","SessionPropertiesBase","_authScheme","_accessToken","_idToken","_issuerIdentifier","_url","_password","_userName","_clientName","_appDesc","_vpnName","_connectTimeout","minTimeout","margin","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","_genSendTimestamps","_genReceiveTimestamps","_includeSenderId","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","_setUserIdentification","_subLocalPriority","_subNetworkPriority","_ignoreDupSubError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","_sendBufferMaxSize","_assumedMaxAdSize","_maxWebPayload","issuerIdentifier","password","userName","clientName","applicationDescription","vpnName","vpnNameInUse","generateSendTimestamps","generateReceiveTimestamps","includeSenderId","generateSequenceNumber","p2pInboxInUse","userIdentification","subscriberLocalPriority","subscriberNetworkPriority","ignoreDuplicateSubscriptionError","sendBufferMaxSize","maxWebPayload","SslProtocolExcludeConstantMap","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","transportProtocolDefaultList","xhrBinary","streaming","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","statesCanAck","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","createFromSpec","handleDTEUnsubscribeResponse","updateProperty","responseCallback","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","resp","smpResp","afterRemoveCallback","ignoreSubscriptionNotFoundError","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","sessionState","getSessionState","getTransportProtocol","capabilityType","isNumber","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","browserProperties","destinationType","factoryMethod","vrn","localName","operationEnum","allow","anything","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","hasAutoSenderTimestamp","now","sequenceNumber","noSequenceNumber","hasAutoSequenceNumber","senderId","noSenderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramLen","paramValueLen","smfParam","addParameter","encAdp0Param","uh","paramtype","byte1","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","encAdpUTF8NTParam","byte2","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","version","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","adaptSmfToMessage","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","payloadOffset","headerLength","cs","pm_content_summary","payloadLength","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","binaryMetadataChunk","payloadPosition","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","adaptMessageToBinaryMeta","sdtPreamble","sdtStreamContainer","adaptMessageToSmf_nonPayload","smfHeaderIn","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","encodedSdtPayload","binaryMetaSMF","asEncodedSmf","MAX_24BITS","adaptMessageToSmf_payloadFinalize","payloadBytes","adaptMessageToSmf","bitRange","maskValues","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","encodedHeader","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeBits","paramTypeCount","lenMap","idx","lightMap","lenBits","lenCount","ContentSummaryDecodeMap","parseTopicQueueOffsets","parseResponseParam","parseDeliveryMode","delmode","lut","parseContentSummary","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","firstByte","lengthModeMap","0","1","2","4","8","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","remaining","isSMFHeaderValid","isSMFAvailable","totalLen","parseSMFExtendedStream","streamLen","pUH","3","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","paramIsLightweight","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parsedTopicOffsets","pStart","pType","pLen","pValueLen","pm_ad_publisher_id","parsedResponse","SUB_ID_LIST","GENERIC_ATTACHMENT","AD_TOPICSEQUENCE_NUMBER","contentSummary","AD_FLOWREDELIVERED_FLAG","extSuccess","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","discardBehaviorValue","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","endpointBytes","endpointType","rsValue","replayStartTimeMs","replayStartTimeNs","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","dto","local","network","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","sanityLoop","capLen","sprop","compressedTLS","plaintextTLS","clientCapsToStr","clientCapList","highestCap","capBits","cap","cc","isClientCert","DELIVERTOONEPRIORITY","prmGetDtoPriorityValue","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","formattedDate","SSL_DOWNGRADE","clientCaps","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","PARTITION_KEY_HASH","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","passEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","toTerminate","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","SMF_LOST_FRAMING_THRESHOLD","logPeekBuffer","bufPair","BufferSMFClient","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","fs","SolclientSessionLib","NodeTLSOptsMixin","checkCertificateCNs","cert","_props","valid","cn","createTLSOptions","constMap","trimmed","tsContents","readFileSync","tsFile","navigator","appVersion","CompressedTransport","TcpRawTransport","TcpTlsTransport","TlsOnlyTransport","Duplex","ShuntableTransport","_shunted","_dontEnd","_underlyingTransport","underlyingTransport","_interimBuffer","_transportDrained","_connected","shunt","dontEnd","_write","INVALID_STATE_FOR_OPERATION","_read","unpause","noPause","pause","eventCB","onConnect","onError","onClose","onDrain","resendBuffer","forceFailure","setNoDelay","arg","shunted","zlib","TransportBase","TransportSessionEvent","TransportSessionState","client","_clientstats","_waitForSocketDrain","_waitForCompressorDrain","_flushCallback","_socketDrained","_compressorDrained","_state","_socketError","_transportSession","_compressor","_decompressor","setClientStats","setUnderlyingTransport","newUnderlyingTransoprt","WAITING_FOR_DESTROY","write","onData","_client","onErrorStage2","_eventCB","Z_SYNC_FLUSH","onZlibError","_destroy","CONNECTION_FAILED","stage2destroy","onOpen","WAITING_FOR_CREATE","highWaterMark","createDeflateRaw","createInflateRaw","sendCompressed","onCompressorDrain","onerrorStub","unpipe","_hadError","close","flushStage2","resume","prevCallback","net","TransportClientStats","_canSendNeeded","_drained","_rawSocket","rehome","parseHostPort","urlString","port","urlParsed","_ssl","originalSocket","hadError","errorMsg","Socket","bufferSize","tls","_tlsSocket","tlsOptions","socket","getUnderlyingTransport","_shuntableTransport","duplexOptions","tlsShutdown","tlsShutdownStage2","transportProps","immediate","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","useSSL","WebTransportCapabilities","WebTransport","getId","compressingLayer","plaintextTransport","tlsLayer","uncompressedTransport","encryptedTransport","compress","precallback","WebTransportsLib","lutTransportProtocols","protocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","tsEventCode","_transportEventCode","_sid","getResponseCode","transportEventCode","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","SOL_CONNECTION_DEBUG","prependOrigin","location","origin","getTs","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","LastGotToken","LastSendMsg","waitedTok","hadToken","LastGotData","LastReturnToken","returnedToken","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","setRequestHeader","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","xhr","check","onprogress","WebTransportSessionBase","PacketReadState","READING_HEADER","STREAMING","MSIE_TRANSPORT_PADDING","adaptURL","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","transportContentType","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_queuedDataSize","initPreformattedHeaders","sendQueuedData","getQueuedDataToSend","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","WebSocketTransportSession","browserSupportsBinaryWebSockets","browserSupportsStreamingResponse","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","bytesAllowed","getBufferedAmount","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_lastDowngradeSucceeded","_socket","_sender","WebSocketCloseCodes","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","http","https","globalContext","MyWebSocket","WebSocket","msgBuf","wasClean","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","WAITING_FOR_CONNECT","onMessage","_socketOptions","createWebSocketOptions","ondrain","binaryType","onopen","onmessage","onclose","onerror","force","bufferAllow","maxPayloadBytes","onDrainCallback","Agent","keepAlive","wsAgent","origCreateConnection","createConnection","opts","validator","validatorArgs","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","typedesc","cloneObj","CLONE_CIRCULAR","CLONE_DEPTH","acc","NODE_OS_TYPES","Darwin","Windows_NT","DEFAULT","NODE_PROCESS","os","ostype","osname","nodeVersionStr","release","arch","PAD_LEFT","PAD_RIGHT","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","capitalize","lastChar","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","TARGET","FORMATTED_DATE","pad","YYYY","SUMMARY","EPSILON","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","elseFn","when","condition","unless","NO_OBJ","objectValues","subcodeSummary","got","expectedStr","gotStr","validateError","typename","memberOfEnum","names","isEnumMemberOrNothing","isInstanceOfOrNull","isInstanceOfOrUndefined","isMember","memberOf","isNumberOrNull","isRangeCompare","isStringOrNull","_instanceof","nativeMap","nativeSet","nativePromise","depth","allParents","allChildren","useBuffer","_clone","proto","reject","__isArray","__isRegExp","RegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","clonePrototype","__objToStr","o","re","ignoreCase","multiline","createWebSocketStream","Server","Receiver","Sender","WebSocketServer","EMPTY_BUFFER","FastBuffer","Symbol","species","totalLength","_mask","mask","_unmask","toArrayBuffer","toBuffer","readOnly","isView","unmask","WS_NO_BUFFER_UTIL","bufferUtil","BINARY_TYPES","alloc","GUID","kForOnEventAttribute","kListener","kStatusCode","kWebSocket","NOOP","kCode","kData","kError","kMessage","kReason","kTarget","kType","kWasClean","Event","CloseEvent","ErrorEvent","MessageEvent","EventTarget","addEventListener","handler","listeners","wrapper","isBinary","callListener","_closeFrameReceived","_closeFrameSent","removeEventListener","thisArg","tokenChars","offers","mustUnescape","isEscaping","inQuotes","extensionName","paramName","SyntaxError","token","format","configurations","kDone","kRun","Limiter","concurrency","jobs","job","TRAILER","kPerMessageDeflate","kTotalLength","kCallback","kBuffers","zlibLimiter","PerMessageDeflate","isServer","maxPayload","_maxPayload","_options","_threshold","threshold","_isServer","_deflate","_inflate","concurrencyLimit","offer","serverNoContextTakeover","server_no_context_takeover","clientNoContextTakeover","client_no_context_takeover","serverMaxWindowBits","server_max_window_bits","clientMaxWindowBits","client_max_window_bits","accept","normalizeParams","acceptAsServer","acceptAsClient","cleanup","accepted","num","isInteger","TypeError","decompress","fin","_decompress","_compress","windowBits","Z_DEFAULT_WINDOWBITS","zlibInflateOptions","inflateOnError","inflateOnData","_readableState","endEmitted","zlibDeflateOptions","deflateOnData","RangeError","Writable","isValidStatusCode","isValidUTF8","GET_INFO","GET_PAYLOAD_LENGTH_16","GET_PAYLOAD_LENGTH_64","GET_MASK","GET_DATA","INFLATING","_binaryType","_extensions","_skipUTF8Validation","skipUTF8Validation","_bufferedBytes","_buffers","_compressed","_payloadLength","_fragmented","_masked","_fin","_opcode","_totalPayloadLength","_messageLength","_fragments","_loop","startLoop","consume","dst","getInfo","getPayloadLength16","getPayloadLength64","getMask","getData","compressed","haveLength","controlMessage","perMessageDeflate","er","fragments","ErrorCtor","statusCode","errorCode","randomFillSync","applyMask","kByteLength","maskBuffer","generateMask","_generateMask","_maskBuffer","_firstFragment","_deflating","merge","skipMasking","opcode","rsv1","writeUInt16BE","writeUIntBE","enqueue","sendFrame","frame","ping","pong","binary","destroyed","dequeue","Reflect","cork","uncork","emitClose","duplexOnEnd","_writableState","finished","duplexOnError","ws","terminateOnDestroy","duplex","autoDestroy","objectMode","writableObjectMode","CLOSED","nextTick","called","_final","isPaused","isUtf8","_isValidUTF8","WS_NO_UTF_8_VALIDATE","createHash","subprotocol","keyRegex","RUNNING","CLOSING","handleProtocols","clientTracking","verifyClient","noServer","backlog","server","_server","createServer","res","body","STATUS_CODES","writeHead","listen","emitConnection","_removeListeners","addListeners","listening","upgrade","head","handleUpgrade","clients","_shouldEmitClose","shouldHandle","pathname","socketOnError","headers","method","abortHandshakeOrEmitwsClientError","abortHandshake","secWebSocketProtocol","secWebSocketExtensions","secure","authorized","encrypted","verified","completeUpgrade","readable","digest","update","_protocol","setSocket","Connection","randomBytes","URL","closeTimeout","kAborted","protocolVersions","readyStates","subprotocolRegex","_closeCode","_closeMessage","_closeTimer","_paused","_readyState","_receiver","_bufferedAmount","_redirects","initAsClient","receiver","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","unshift","socketOnClose","socketOnData","socketOnEnd","OPEN","_req","errorEmitted","sendAfterClose","needDrain","property","websocket","protocolVersion","followRedirects","maxRedirects","socketPath","parsedUrl","isSecure","isIpcUrl","invalidUrlMessage","hash","emitErrorAndClose","defaultPort","protocolSet","tlsConnect","netConnect","Upgrade","search","handshakeTimeout","Origin","username","auth","parts","_originalIpc","_originalSecure","_originalHostOrSocketPath","entries","isSameHost","authorization","cookie","addr","serverProt","protError","extensionNames","finishRequest","servername","isIP","setHeader","receiverOnFinish","read","require","wasm","WebAssembly","Instance","Module","unsigned","__isLong__","ctz32","clz32","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","mul","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiplier","divide","divisor","approx","halfThis","shr","shl","toUnsigned","shru","log2","ceil","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","__webpack_exports__"],"sourceRoot":""}